{"version":3,"sources":["constants/index.js","util/APIUtils.js","util/Colors.js","util/Helpers.js","poll/Post.js","common/LoadingIndicator.js","poll/PostList.js","poll/NewPost.js","user/login/Login.js","user/signup/Signup.js","common/NotFound.js","common/ServerError.js","user/profile/Profile.js","poll.svg","common/AppHeader.js","common/PrivateRoute.js","group/NewGroup.js","common/SiderMenu.js","group/EditGroup.js","user/ChangePassword.js","app/App.js","registerServiceWorker.js","index.js"],"names":["API_BASE_URL","process","REACT_APP_API_BASE_URL","ACCESS_TOKEN","POLL_LIST_SIZE","NAME_MAX_LENGTH","USER_MAX_LENGTH","request","options","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","request2","getAllPolls","page","size","method","getAllPollsSearch","search","getOnePolls","id","getAllPollsOfGroup","code","getAllGroups","getAllUserVotedChoice","choice","getAllComment","postId","deleteImage","getListUser","user","type","getUserCreatedPolls","username","getUserVotedPolls","getUserSavedPolls","getUserNotification","colors","getAvatarColor","name","substr","hash","i","length","charCodeAt","index","Math","abs","formatDateTime","dateTimeString","date","Date","monthIndex","getMonth","year","getFullYear","getDate","getHours","getMinutes","TextArea","FormItem","Item","RadioGroup","Group","config","action","authorization","getTime","time","timeNew","difference_ms","seconds","floor","minutes","hours","days","Editor","onChange","onSubmit","submitting","value","textButton","rows","style","marginBottom","htmlType","float","loading","onClick","ManagerPost","props","isOwner","block","onUpdatePost","postIndex","isUserStorage","deleteFollowPost","onFollowPost","danger","onDeletePost","InfomationGroups","className","dataSource","list","renderItem","item","Meta","title","to","color","description","admin","createDate","Infomation","gutter","span","poll","isUnseenUserForVote","checkedChildren","unCheckedChildren","defaultChecked","disabled","isAddChoice","isUnseenUserForAddChoice","isCanFix","maxVotePerTimeLoad","maxVotePerChoice","timeLoad","maxVoteOfPoll","marginRight","showResultCase","isExpired","event","onEndPoll","pollIndex","PollItem","placement","content","trigger","shape","icon","MoreOutlined","question","photo","src","handleVoteChange","currentVote","pollChoices","choiceCanAdd","validateStatus","choiceNew","help","errorMsg","choiceAdd","selectedChoice","handleVoteSubmit","totalVotes","getTimeRemaining","currentUser","createdBy","addChoiceInput","PlusOutlined","window","screen","width","addAChoice","CompletedOrVotedPollChoice","percent","round","percentVote","mouseEnterDelay","maxWidth","minWidth","choicePrime","wordBreak","review","text","fontWeight","handleClickShowListVoted","isWinner","CompletedOrVotedCanVotePollChoice","count","userVoteCount","offset","key","isSelected","isDelete","arrowPointAtCenter","DeleteOutlined","handleClickDelChoice","canFix","MinusOutlined","handleClick","Post","calculatePercentage","post","polls","voteCount","choiceIndex","choices","getWinningChoice","reduce","prevChoice","currentChoice","Infinity","expirationDateTime","choiceText","state","slice","target","validateChoice","setState","onReviewChange","onImageChoiceChange","info","file","status","fileList","notification","success","message","error","removeAddChoice","placeholder","defaultValue","onPressEnter","listType","maxCount","UploadOutlined","handleChangeComment","handleSubmitComment","onComment","onReply","handleChangeReply","handleSubmitReply","onClickUpdateName","isUpdateName","onChangeName","valueName","updateName","Array","fill","this","comments","submittingComment","valueComment","showReply","commentViews","loadMore","showComment","isLastComment","onLoadMoreComment","pageComment","push","itemLayout","display","actions","onDeleteComment","author","avatar","backgroundColor","toUpperCase","datetime","replys","rowKey","record","reply","replyIndex","onDeleteReply","submittingReply","valueReply","postView","forEach","totalUserVotes","winningChoice","expired","handleShowListVoted","handleDeleteVoteSubmit","handleDeleteChoiceSubmit","paddingLeft","isAuthenticated","creationDateTime","getTime2","publicDate","showCase","groupResponses","cursor","onLikePost","isUserLike","HeartTwoTone","twoToneColor","HeartOutlined","totalLike","MessageOutlined","totalComment","margin","Component","LoadingIndicator","antIcon","Loading3QuartersOutlined","fontSize","spin","indicator","textAlign","marginTop","PostList","_isMounted","data","preventDefault","history","pollId","posts","addData","body","JSON","stringify","addChoice","catch","handleLogout","concat","comment","last","splice","commentId","some","cm","submittingReply2","loadPostList","promise","isLoading","match","params","currentVotes2","currentVotes","check","totalElements","totalPages","socketPoll","choiceSocket","choiceId","commentIndex","showModalDeletePost","visiblePost","currentPostIndex","handleDeletePostSubmit","handleLoadMore","handleLoadMoreUserVoted","loadListVoted","currentChoiceId","pageVoted","handleCancel","visible","currentPollIndex","currentValue","handleCancelComment","visibleCommentDelete","currentCommentIndex","handleCancelReply","visibleReplyDelete","currentReplyIndex","handleCancelPost","handleCancelListVoted","visibleListVoted","votedUsers","isLoading2","last2","showModalListVoted","showModal","currentTarget","showModalComment","console","log","showModalReply","deleteData","voteData","handleDeleteCommentSubmit","handleDeleteReplySubmit","replyId","prevY","stompClient","bind","send","disconnect","socket","SockJS","Stomp","over","Authorization","connect","subscribe","parse","nextProps","castVote","postViews","onOk","onCancel","footer","centered","initialLoad","pageStart","hasMore","threshold","useWindow","isloading","height","lineHeight","borderRadius","boxShadow","VerticalAlignTopOutlined","withRouter","Option","getMentions","NewPoll","range","start","end","result","disabledDate","current","moment","endOf","disabledDateTime","disabledHours","disabledMinutes","disabledSeconds","indexPoll","addPoll","pollLength","isHasPollLength","removeChoice","choiceNumber","pollNumber","removePoll","onSearch","loadUserList","onSearchGroup","loadGroupList","users","filter","usersSend","userSend","groups","group","groupsSend","groupSend","validateQuestion","questionText","handleQuestionChange","pollitem","handleChoiceChange","indexChoice","choiceitem","handlePollDaysChange","handlePollHoursChange","handleTimeLoadDaysChange","handleTimeLoadHoursChange","onChangeIsUnseenUserForVote","onChangeIsUnseenUserForAddChoice","onChangeIsAddChoice","onChangeIsCanFix","onChangeIsHasPollLength","onChangeIsUnseenOwner","isUnseenOwner","onChangeIsDelay","isDelay","handleChangemaxVoteOfPoll","handleChangemaxVotePerChoice","handleChangemaxVotePerTimeLoad","handleQuestionForPostChange","handleShowResultCaseChange","handleShowCaseChange","onSelect","mentions","mention","validateUsers","onSelectGroup","validateGroups","validateStatusGroup","errorMsgGroup","validateStatusUser","errorMsgUser","onChangeUpload","onChangeUploadChoice","handleChoiceChangeReview","publicDateMoment","handleSubmit","isFormInvalid","handlePublicDateChange","dateString","pollData","map","usersUsername","format","createPoll","j","childrenUser","pollViews","choiceViews","index2","onFinish","autosize","minRows","maxRows","xs","direction","disabledTime","showTime","showNow","PollCreate","CloseOutlined","from","keys","min","PollChoice","LoginForm","values","loginRequest","login","setItem","accessToken","onLogin","rules","required","prefix","UserOutlined","autoComplete","Password","LockOutlined","Signup","validateName","validationStatus","validateEmail","email","RegExp","test","validateUsername","validatePassword","password","handleInputChange","validateUsernameAvailability","validateEmailAvailability","validationFun","inputName","inputValue","signupRequest","signup","label","hasFeedback","onBlur","usernameValue","usernameValidation","available","emailValue","emailValidation","NotFound","ServerError","TabPane","Profile","beforeUpload","a","formData","FormData","imageData","res","location","href","uploading","enter","changeName","isEdit","onEdit","validateFunc","urlImage","fileResponse","loadUserProfile","getUserProfile","notFound","serverError","rotate","CameraOutlined","position","marginLeft","zIndex","EditOutlined","formatDate","joinedAt","defaultActiveKey","animated","tabBarStyle","callBack","tab","pollCount","storageCount","Header","Search","AppHeader","loadUserNotification","handleMenuClick","onLogout","handleMenuClick2","noti","notificationCount","read","notiItem","readNoti","sourceId","handleVisibleChange","flag","menuItems","HomeOutlined","pollIcon","alt","ProfileDropdownMenu2","ProfileDropdownMenu","allowClear","paddingTop","mode","selectedKeys","pathname","dropdownMenu","Divider","overlay","getPopupContainer","document","getElementsByClassName","DownOutlined","notiViews","createAt","onVisibleChange","overflowCount","BellOutlined","PrivateRoute","component","authenticated","rest","render","NewGroup","validateGroup","groupCodeValue","indexOf","validateGroupCodeAvailability","groupData","createGroup","groupValidation","SiderMenu","loadListGroup","listGroups","currentGroupIndex","onDeleteGroup","groupIndex","handleDeleteGroupSubmit","groupId","handleCancelLeave","visibleLeave","onLeaveGroup","handleLeaveGroupSubmit","groupView","whiteSpace","ManagerGroup","currentUsername","groupAdminUsername","usernameAdmin","ref","scrollParentRef","theme","ItemGroup","EditGroup","loadGroup","getGroup","getColumnSearchProps","dataIndex","filterDropdown","setSelectedKeys","confirm","clearFilters","padding","node","searchInput","e","handleSearch","SearchOutlined","handleReset","closeDropdown","searchText","searchedColumn","filterIcon","filtered","undefined","onFilter","toString","toLowerCase","includes","onFilterDropdownVisibleChange","setTimeout","select","currentUserId","currentUserIndex","onDeleteUser","userId","userIndex","pagination","filters","sorter","extra","handleDeleteUserSubmit","groupMem","member","editGroup","columns","compare","b","multiple","fixed","num","ChangePassword","newpassword","currentpassword","passwordData","changePasswordRequest","newPassword","currentPassword","Sider","Content","useState","setCurrentUser","setIsAuthenticated","setIsLoading","top","duration","useEffect","loadCurrentUser","redirectTo","notificationType","removeItem","handleLogin","maxHeight","left","exact","path","NewPost","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","getElementById","URL","origin","addEventListener","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6b3d2c31.chunk.js","sourcesContent":["export const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'https://powerful-fjord-93250.herokuapp.com/api';\r\nexport const ACCESS_TOKEN = 'accessToken';\r\n\r\nexport const POLL_LIST_SIZE = 10;\r\nexport const USER_LIST_SIZE = 5;\r\nexport const MAX_CHOICES = 6;\r\nexport const POLL_QUESTION_MAX_LENGTH = 140;\r\nexport const POLL_CHOICE_MAX_LENGTH = 40;\r\n\r\nexport const NAME_MIN_LENGTH = 4;\r\nexport const NAME_MAX_LENGTH = 40;\r\n\r\nexport const USERNAME_MIN_LENGTH = 3;\r\nexport const USERNAME_MAX_LENGTH = 15;\r\n\r\nexport const EMAIL_MAX_LENGTH = 40;\r\n\r\nexport const PASSWORD_MIN_LENGTH = 6;\r\nexport const PASSWORD_MAX_LENGTH = 20;\r\n\r\nexport const GROUP_MAX_LENGTH = 2;\r\nexport const USER_MAX_LENGTH = 20;\r\n\r\nexport const GROUP_LIST_SIZE = 13;\r\n","import { API_BASE_URL, POLL_LIST_SIZE,USER_LIST_SIZE, ACCESS_TOKEN,GROUP_LIST_SIZE } from '../constants';\r\nconst request = (options) => {\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json'\r\n    })\r\n    \r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n    .then(response => \r\n        response.json().then(json => {\r\n            if(!response.ok) {\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    );\r\n};\r\nconst request2 = (options) => {\r\n    const headers = new Headers({\r\n        'Accept': '*/*',\r\n    })\r\n    \r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n    .then(response => \r\n        response.json().then(json => {\r\n            if(!response.ok) {\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    );\r\n};\r\nexport function getAllPolls(page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/polls?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getAllPollsSearch(search,page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/search?search=\"+search+\"&page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getOnePolls(id) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + id,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function updatePostName(postId,name) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + postId+\"?name=\"+name,\r\n        method: 'PUT'\r\n    });\r\n}\r\nexport function getAllPollsOfGroup(code,page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/polls?code=\"+code+\"&page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getAllGroups(page, size) {\r\n    page = page || 0;\r\n    size = size || GROUP_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/groups?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getAllUserVotedChoice(choice,page, size) {\r\n    page = page || 0;\r\n    size = size || USER_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/voted?choice=\"+choice+\"&page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getAllComment(postId,page, size) {\r\n    page = page || 0;\r\n    size = size || USER_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\"+postId+\"/comment?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function commentPost(postId,text) {\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\"+postId+\"/comment?text=\" + text,\r\n        method: 'POST'\r\n    });\r\n}\r\nexport function replyComment(postId,commentId,text) {\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\"+postId+\"/comment/\"+commentId+\"?text=\" + text,\r\n        method: 'POST'\r\n    });\r\n}\r\nexport function createPoll(pollData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls\",\r\n        method: 'POST',\r\n        body: JSON.stringify(pollData)         \r\n    });\r\n}\r\n\r\nexport function castVote(voteData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + voteData.pollId + \"/votes\",\r\n        method: 'POST',\r\n        body: JSON.stringify(voteData)\r\n    });\r\n}\r\n\r\nexport function deleteVote(pollId,deleteData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + pollId + \"/deletevotes\",\r\n        method: 'POST',\r\n        body: JSON.stringify(deleteData)\r\n    });\r\n}\r\nexport function deleteChoice(pollId,deleteData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + pollId + \"/deletechoice\",\r\n        method: 'POST',\r\n        body: JSON.stringify(deleteData)\r\n    });\r\n}\r\nexport function endPoll(pollId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + pollId + \"/endpoll\",\r\n        method: 'PUT'\r\n    });\r\n}\r\nexport function addChoice(addData,pollId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" + pollId + \"/addchoice\",\r\n        method: 'POST',\r\n        body: JSON.stringify(addData)\r\n    });\r\n}\r\n\r\nexport function castLike(postId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" +postId+\"/like\",\r\n        method: 'POST'\r\n    });\r\n}\r\n\r\nexport function deletePost(postId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" +postId,\r\n        method: 'DELETE'\r\n    });\r\n}\r\n\r\nexport function deleteComment(postId,commentId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" +postId+\"/comment/\"+commentId,\r\n        method: 'DELETE'\r\n    });\r\n}\r\n\r\nexport function deleteReply(postId,commentId,replyId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" +postId+\"/comment/\"+commentId+\"/reply/\"+replyId,\r\n        method: 'DELETE'\r\n    });\r\n}\r\nexport function savePost(postId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" +postId+\"/save\",\r\n        method: 'POST'\r\n    });\r\n}\r\nexport function deleteSavePost(postId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/polls/\" +postId+\"/save\",\r\n        method: 'DELETE'\r\n    });\r\n}\r\n\r\nexport function login(loginRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/signin\",\r\n        method: 'POST',\r\n        body: JSON.stringify(loginRequest)\r\n    });\r\n}\r\n\r\nexport function signup(signupRequest) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/signup\",\r\n        method: 'POST',\r\n        body: JSON.stringify(signupRequest)\r\n    });\r\n}\r\n\r\nexport function createGroup(groupData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/groups\",\r\n        method: 'POST',\r\n        body: JSON.stringify(groupData)\r\n    });\r\n}\r\nexport function createPollPhoto(imageData) {\r\n        return request2({\r\n            url: API_BASE_URL + \"/polls\",\r\n            method: 'POST',\r\n            body: imageData\r\n        });\r\n    }\r\nexport function changeAvatar(imageData) {\r\n    return request2({\r\n        url: API_BASE_URL + \"/file/useravatar\",\r\n        method: 'POST',\r\n        body: imageData\r\n    });\r\n}\r\nexport function uploadImage(imageData) {\r\n    return request2({\r\n        url: API_BASE_URL + \"/file/upload\",\r\n        method: 'POST',\r\n        body: imageData\r\n    });\r\n}\r\nexport function deleteImage(id) {\r\n    return request2({\r\n        url: API_BASE_URL + \"/file/upload?id=\"+id,\r\n        method: 'DELETE'\r\n    });\r\n}\r\nexport function getImage(filename) {\r\n    return request({\r\n        url: API_BASE_URL + \"/file/getImage/\" + filename,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function checkUsernameAvailability(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkUsernameAvailability?username=\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function checkEmailAvailability(email) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/checkEmailAvailability?email=\" + email,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function checkGroupCodeAvailability(code) {\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/checkGroupCodeAvailability?code=\" + code,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getCurrentUser() {\r\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\r\n        return Promise.reject(\"No access token set.\");\r\n    }\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/user/me\",\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getListUser(user,type) {\r\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\r\n        return Promise.reject(\"No access token set.\");\r\n    }\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/user/find?\"+type+\"=\"+user,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getListGroup(name) {\r\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\r\n        return Promise.reject(\"No access token set.\");\r\n    }\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/find?name=\"+name,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getGroup(code) {\r\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\r\n        return Promise.reject(\"No access token set.\");\r\n    }\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/edit?code=\"+code,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getListUserForAddGroup(username,code) {\r\n    if(!localStorage.getItem(ACCESS_TOKEN)) {\r\n        return Promise.reject(\"No access token set.\");\r\n    }\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/findadd?username=\"+username+\"&code=\"+code,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function editGroup(groupData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/edit\",\r\n        method: 'POST',\r\n        body: JSON.stringify(groupData)\r\n    });\r\n}\r\nexport function deleteUserGroup(groupId,userId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/\"+groupId+\"/user?user=\"+userId,\r\n        method: 'DELETE'\r\n    });\r\n}\r\nexport function leaveGroup(groupId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/\"+groupId+\"/leave\",\r\n        method: 'DELETE',\r\n    });\r\n}\r\nexport function deleteGroup(groupId) {\r\n    return request({\r\n        url: API_BASE_URL + \"/groups/\"+groupId,\r\n        method: 'DELETE',\r\n    });\r\n}\r\nexport function getUserProfile(username) {\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function changePassword(passwordData) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/changepassword\",\r\n        method: 'PUT',\r\n        body: JSON.stringify(passwordData)\r\n    });\r\n}\r\nexport function changeName(name) {\r\n    return request({\r\n        url: API_BASE_URL + \"/user/me?name=\"+name,\r\n        method: 'PUT'\r\n    });\r\n}\r\n\r\nexport function getUserCreatedPolls(username, page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username + \"/polls?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\n\r\nexport function getUserVotedPolls(username, page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/users/\" + username + \"/votes?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getUserSavedPolls(page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/users/savepost?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function getUserNotification(page, size) {\r\n    page = page || 0;\r\n    size = size || POLL_LIST_SIZE;\r\n\r\n    return request({\r\n        url: API_BASE_URL + \"/users/notification?page=\" + page + \"&size=\" + size,\r\n        method: 'GET'\r\n    });\r\n}\r\nexport function readNotification(id) {\r\n    return request({\r\n        url: API_BASE_URL + \"/users/notification?id=\" + id,\r\n        method: 'PUT'\r\n    });\r\n}\r\nexport function confirmMail(code) {\r\n    return request({\r\n        url: API_BASE_URL + \"/auth/active?token=\" + code,\r\n        method: 'GET'\r\n    });\r\n}","const colors = [\r\n    '#F44336', '#e91e63', '#9c27b0', '#673ab7',\r\n    '#ff9800', '#ff5722', '#795548', '#607d8b',\r\n    '#3f51b5', '#2196F3', '#00bcd4', '#009688',\r\n    '#2196F3', '#32c787', '#00BCD4', '#ff5652',\r\n    '#ffc107', '#ff85af', '#FF9800', '#39bbb0',\r\n    '#4CAF50', '#ffeb3b', '#ffc107',\r\n];\r\n\r\nexport function getAvatarColor(name) {\r\n    name = name.substr(0, 6);\r\n\r\n    var hash = 0;\r\n    for (var i = 0; i < name.length; i++) {\r\n        hash = 31 * hash + name.charCodeAt(i);\r\n    }\r\n    var index = Math.abs(hash % colors.length);\r\n    return colors[index];\r\n}","export function formatDate(dateString) {\r\n    const date = new Date(dateString);\r\n\r\n    const monthNames = [\r\n      \"January\", \"February\", \"March\",\r\n      \"April\", \"May\", \"June\", \"July\",\r\n      \"August\", \"September\", \"October\",\r\n      \"November\", \"December\"\r\n    ];\r\n  \r\n    const monthIndex = date.getMonth();\r\n    const year = date.getFullYear();\r\n  \r\n    return monthNames[monthIndex] + ' ' + year;\r\n}\r\n  \r\nexport function formatDateTime(dateTimeString) {\r\n  const date = new Date(dateTimeString);\r\n\r\n  const monthNames = [\r\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\",\r\n    \"May\", \"Jun\", \"Jul\", \"Aug\", \r\n    \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n  ];\r\n\r\n  const monthIndex = date.getMonth();\r\n  const year = date.getFullYear();\r\n\r\n  return date.getDate() + ' ' + monthNames[monthIndex] + ' ' + year + ' - ' + date.getHours() + ':' + date.getMinutes();\r\n}  ","import React, { Component } from 'react';\r\nimport './Post.css';\r\nimport { Comment, Avatar, Card, Divider } from 'antd';\r\n//import { getAllComment, commentPost, replyComment } from '../util/APIUtils';\r\nimport { Link } from 'react-router-dom';\r\nimport { getAvatarColor } from '../util/Colors';\r\nimport { formatDateTime } from '../util/Helpers';\r\nimport { API_BASE_URL, ACCESS_TOKEN, POLL_CHOICE_MAX_LENGTH, POLL_LIST_SIZE } from '../constants';\r\nimport { Image, Badge, List } from 'antd';\r\nimport { Popover, Upload } from 'antd';\r\nimport { Form, Input, Col, notification, Switch, Row, Tooltip } from 'antd';\r\nimport { HeartOutlined, HeartTwoTone, MessageOutlined, UploadOutlined, MoreOutlined, DeleteOutlined, MinusOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { Radio, Button } from 'antd';\r\nconst { TextArea } = Input\r\nconst FormItem = Form.Item;\r\nconst RadioGroup = Radio.Group;\r\nconst config = {\r\n    name: \"file\",\r\n    action: API_BASE_URL + \"/file/upload\",\r\n    headers: {\r\n        authorization:\r\n            'Bearer ' + localStorage.getItem(ACCESS_TOKEN)\r\n    },\r\n\r\n};\r\nconst getTime = (time) => {\r\n    if (time == null) return \"\"\r\n    const timeNew = new Date(time).getTime();\r\n    const currentTime = new Date().getTime();\r\n\r\n    var difference_ms = currentTime - timeNew;\r\n    var seconds = Math.floor((difference_ms / 1000) % 60);\r\n    var minutes = Math.floor((difference_ms / 1000 / 60) % 60);\r\n    var hours = Math.floor((difference_ms / (1000 * 60 * 60)) % 24);\r\n    var days = Math.floor(difference_ms / (1000 * 60 * 60 * 24));\r\n\r\n    let timeRemaining;\r\n    if (days > 7) {\r\n        timeRemaining = formatDateTime(time);\r\n    }\r\n    else if (days > 0) {\r\n        timeRemaining = days + \" ngày trước\";\r\n    } else if (hours > 0) {\r\n        timeRemaining = hours + \" giờ trước\";\r\n    } else if (minutes > 0) {\r\n        timeRemaining = minutes + \" phút trước\";\r\n    } else if (seconds > 0) {\r\n        timeRemaining = seconds + \" giây trước\";\r\n    } else {\r\n        timeRemaining = \"Vừa mới\";\r\n    }\r\n\r\n    return timeRemaining;\r\n}\r\nconst getTime2 = (time) => {\r\n    if (time == null) return \"\"\r\n    const timeNew = new Date(time).getTime();\r\n    const currentTime = new Date().getTime();\r\n\r\n    var difference_ms = timeNew - currentTime;\r\n    var seconds = Math.floor((difference_ms / 1000) % 60);\r\n    var minutes = Math.floor((difference_ms / 1000 / 60) % 60);\r\n    var hours = Math.floor((difference_ms / (1000 * 60 * 60)) % 24);\r\n    var days = Math.floor(difference_ms / (1000 * 60 * 60 * 24));\r\n\r\n    let timeRemaining;\r\n    if (days > 0) {\r\n        timeRemaining = \"Còn \" + days + \" ngày\";\r\n    } else if (hours > 0) {\r\n        timeRemaining = \"Còn \" + hours + \" giờ\";\r\n    } else if (minutes > 0) {\r\n        timeRemaining = \"Còn \" + minutes + \" phút\";\r\n    } else if (seconds > 0) {\r\n        timeRemaining = \"Còn \" + seconds + \" giây\";\r\n    } else {\r\n        timeRemaining = \"\";\r\n    }\r\n\r\n    return timeRemaining;\r\n}\r\n// const CommentList = ({ comments }) => {\r\n//     const arrayReply = Array(comments.length).fill(false);\r\n//     return (\r\n//         <List\r\n//             dataSource={comments}\r\n//             // header={`${comments.length} ${comments.length > 1 ? 'replies' : 'reply'}`}\r\n//             itemLayout=\"horizontal\"\r\n//             renderItem={(props,index) => <><Comment\r\n//                 actions={[<span key=\"comment-nested-reply-to\" onClick={() => arrayReply[index]=!arrayReply[index]}>Reply to</span>]}\r\n//                 author={props.user.name} avatar={<Avatar\r\n//                     style={{ backgroundColor: getAvatarColor(props.user.name) }} >\r\n//                     {props.user.name[0].toUpperCase()}\r\n//                 </Avatar>} content={<p>{props.text}</p>} datetime={getTime(props.createDate)}>\r\n//                 {props.replys != null && props.replys.length != 0 && <List\r\n//                     dataSource={props.replys}\r\n//                     itemLayout=\"horizontal\"\r\n//                     renderItem={reply => <Comment author={reply.user.name} avatar={reply.user.photo} content={<p>{reply.text}</p>} datetime={getTime(reply.createDate)}>\r\n//                     </Comment>}\r\n//                 />}\r\n\r\n//             </Comment>{arrayReply[index]&&<Comment\r\n//                     avatar={\r\n//                         <Avatar\r\n//                             style={{ backgroundColor: getAvatarColor(props.user.name) }} >\r\n//                             {props.user.name[0].toUpperCase()}\r\n//                         </Avatar>\r\n//                     }\r\n//                     content={\r\n//                         <Editor\r\n//                         />\r\n//                     }\r\n//                 />}</>}\r\n//         />);\r\n// }\r\n\r\nconst Editor = ({ onChange, onSubmit, submitting, value, textButton }) => (\r\n    <>\r\n        <Form.Item>\r\n            <TextArea rows={3} onChange={onChange} value={value} />\r\n        </Form.Item>\r\n        <Form.Item style={{ marginBottom: \"0px\" }}>\r\n            <Button htmlType=\"submit\" style={{ float: \"right\" }} loading={submitting} onClick={onSubmit} type=\"primary\">\r\n                Add {textButton}\r\n            </Button>\r\n        </Form.Item>\r\n    </>\r\n);\r\nclass Post extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            choiceAdd: Array(this.props.post.polls.length).fill(null),\r\n            choiceCanAdd: Array(this.props.post.polls.length).fill(true),\r\n            choiceNew: Array(this.props.post.polls.length).fill({\r\n                text: '',\r\n                photo: null,\r\n                review: ''\r\n            }),\r\n            // comments: [],\r\n            // submittingComment: false,\r\n            // valueComment: '',\r\n            // showComment: false,\r\n            // showReply: [],\r\n            // valueReply: '',\r\n            // submittingReply: [],\r\n            // page: 0,\r\n            isUpdateName: false,\r\n            valueName: ''\r\n        }\r\n    }\r\n    calculatePercentage = (choice, pollIndex) => {\r\n        if (this.props.post.polls[pollIndex].totalVotes === 0) {\r\n            return 0;\r\n        }\r\n        return (choice.voteCount * 100) / (this.props.post.polls[pollIndex].totalVotes);\r\n    };\r\n\r\n    isSelected = (pollIndex, choiceIndex) => {\r\n        return this.props.post.polls[pollIndex].choices[choiceIndex].userVoteCount > 0;\r\n    }\r\n\r\n    getWinningChoice = (pollIndex) => {\r\n        return this.props.post.polls[pollIndex].choices.reduce((prevChoice, currentChoice) =>\r\n            currentChoice.voteCount > prevChoice.voteCount ? currentChoice : prevChoice,\r\n            { voteCount: -Infinity }\r\n        );\r\n    }\r\n\r\n    getTimeRemaining = (poll) => {\r\n        if (poll.expirationDateTime == null) return \"No limit\"\r\n        const expirationTime = new Date(poll.expirationDateTime).getTime();\r\n        const currentTime = new Date().getTime();\r\n\r\n        var difference_ms = expirationTime - currentTime;\r\n        var seconds = Math.floor((difference_ms / 1000) % 60);\r\n        var minutes = Math.floor((difference_ms / 1000 / 60) % 60);\r\n        var hours = Math.floor((difference_ms / (1000 * 60 * 60)) % 24);\r\n        var days = Math.floor(difference_ms / (1000 * 60 * 60 * 24));\r\n\r\n        let timeRemaining;\r\n\r\n        if (days > 0) {\r\n            timeRemaining = days + \" days left\";\r\n        } else if (hours > 0) {\r\n            timeRemaining = hours + \" hours left\";\r\n        } else if (minutes > 0) {\r\n            timeRemaining = minutes + \" minutes left\";\r\n        } else if (seconds > 0) {\r\n            timeRemaining = seconds + \" seconds left\";\r\n        } else {\r\n            timeRemaining = \"less than a second left\";\r\n        }\r\n\r\n        return timeRemaining;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            valueName: this.props.post.question\r\n        })\r\n    }\r\n\r\n    onChange = (event, pollIndex) => {\r\n        const choiceText = this.state.choiceNew.slice();\r\n        choiceText[pollIndex] = Object.assign(choiceText[pollIndex], {\r\n            text: event.target.value,\r\n            ...this.validateChoice(event.target.value)\r\n        });\r\n        this.setState({\r\n            choiceNew: choiceText,\r\n        });\r\n\r\n    }\r\n    validateChoice = (choiceText) => {\r\n        if (choiceText.length === 0) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Please enter a choice!'\r\n            }\r\n        } else if (choiceText.length > POLL_CHOICE_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Choice is too long (Maximum ${POLL_CHOICE_MAX_LENGTH} characters allowed)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n    onReviewChange = (event, pollIndex) => {\r\n        const choiceText = this.state.choiceNew.slice();\r\n        choiceText[pollIndex] = Object.assign(choiceText[pollIndex], {\r\n            review: event.target.value,\r\n            ...this.validateChoice(choiceText[pollIndex].text)\r\n        });\r\n        this.setState({\r\n            choiceNew: choiceText,\r\n            // ...this.validateChoice(choiceText[pollIndex].text)\r\n        });\r\n\r\n    }\r\n    onImageChoiceChange = (info, pollIndex) => {\r\n        if (info.file.status !== \"uploading\") {\r\n            //console.log(info);\r\n            //console.log(this.state.choiceNew);\r\n\r\n        }\r\n        if (info.fileList.length === 0) {\r\n            const polls = this.state.choiceNew.slice();\r\n            polls[pollIndex].photo = null;\r\n            this.setState({\r\n                choiceNew: polls\r\n            });\r\n        }\r\n        if (info.file.status === \"done\") {\r\n            const polls = this.state.choiceNew.slice();\r\n            //const isAddChoice = polls[indexPoll].isAddChoice;\r\n\r\n            polls[pollIndex].photo = info.fileList[0].response.id;\r\n            this.setState({\r\n                choiceNew: polls\r\n            });\r\n\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: `${info.file.name} file uploaded successfully`,\r\n            });\r\n            // message.success(`${info.file.name} file uploaded successfully`);\r\n        } else if (info.file.status === \"error\") {\r\n            if(info.file.response!=null){\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: `${info.file.response.message}`,\r\n                });\r\n            }else{\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: `${info.file.name} file upload failed. Max file size is 20MB`,\r\n                });\r\n            }\r\n            //   message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n    }\r\n    addAChoice = (event, postIndex, pollIndex) => {\r\n        this.props.addAChoice(event, postIndex, pollIndex, this.state.choiceNew[pollIndex]);\r\n        const choiceCanAdd = this.state.choiceCanAdd.slice();\r\n        choiceCanAdd[pollIndex] = true;\r\n        const choiceText = this.state.choiceNew.slice();\r\n        choiceText[pollIndex] = {\r\n            text: '',\r\n            review: '',\r\n            photo: null\r\n        };\r\n        this.setState({\r\n            choiceCanAdd: choiceCanAdd,\r\n            choiceNew: choiceText\r\n        })\r\n    }\r\n    removeAddChoice = (pollIndex) => {\r\n        const choiceAdd = this.state.choiceAdd.slice();\r\n        choiceAdd[pollIndex] = null;\r\n        const choiceCanAdd = this.state.choiceCanAdd.slice();\r\n        choiceCanAdd[pollIndex] = true;\r\n        const choiceText = this.state.choiceNew.slice();\r\n        choiceText[pollIndex] = {\r\n            text: '',\r\n            review: '',\r\n            photo: null\r\n        };\r\n        this.setState(\r\n            {\r\n                choiceAdd: choiceAdd,\r\n                choiceCanAdd: choiceCanAdd,\r\n                choiceNew: choiceText\r\n            }\r\n        )\r\n\r\n    }\r\n    addChoiceInput = (postIndex, pollIndex) => {\r\n        const choiceAdd = this.state.choiceAdd.slice();\r\n\r\n        choiceAdd[pollIndex] = <div><Input\r\n            placeholder='Choice '\r\n            size=\"large\"\r\n            defaultValue={this.state.choiceNew[pollIndex].text}\r\n            // className=\"cv-poll-choice\"\r\n            className=\"optional-choice\"\r\n            onPressEnter={(event) => this.addAChoice(event, postIndex, pollIndex)}\r\n            onChange={(event) => this.onChange(event, pollIndex)}\r\n        />\r\n            <MinusOutlined className=\"dynamic-delete-button\" onClick={() => this.removeAddChoice(pollIndex)} />\r\n            <TextArea\r\n                placeholder={'Review'}\r\n                size=\"large\"\r\n                defaultValue={this.state.choiceNew[pollIndex].review}\r\n                // className=\"choice\"\r\n                className=\"optional-textchoice2\"\r\n                onChange={(event) => this.onReviewChange(event, pollIndex)}\r\n                onPressEnter={(event) => this.addAChoice(event, postIndex, pollIndex)}\r\n            />\r\n            <Upload {...config} listType=\"picture\" className=\"upload-inline\" maxCount={1} onChange={(info) => this.onImageChoiceChange(info, pollIndex)}>\r\n                {this.state.choiceNew[pollIndex].photo == null ? <Button className=\"button-upload2\" icon={<UploadOutlined />}>Upload</Button> : <Button className=\"button-upload\" disabled icon={<UploadOutlined />}>Upload</Button>}\r\n            </Upload></div>\r\n        const choiceCanAdd = this.state.choiceCanAdd.slice();\r\n        choiceCanAdd[pollIndex] = false;\r\n        this.setState(\r\n            {\r\n                choiceAdd: choiceAdd,\r\n                choiceCanAdd: choiceCanAdd\r\n            }\r\n        )\r\n    }\r\n    handleChangeComment = (event) => {\r\n        this.props.handleChangeComment(event, this.props.postIndex);\r\n        // this.setState({\r\n        //     valueComment: event.target.value\r\n        // })\r\n    }\r\n    handleSubmitComment = () => {\r\n        this.props.handleSubmitComment(this.props.postIndex);\r\n        // if (!this.state.valueComment) {\r\n        //     return;\r\n        // }\r\n        // if (!this.props.isAuthenticated) {\r\n        //     this.props.history.push(\"/login\");\r\n        //     notification.info({\r\n        //         message: 'Polling App',\r\n        //         description: \"Please login to comment.\",\r\n        //     });\r\n        //     return;\r\n        // }\r\n        // this.setState({\r\n        //     submittingComment: true,\r\n        // });\r\n        // commentPost(this.props.post.id, this.state.valueComment)\r\n        //     .then(response => {\r\n        //         const comment = this.state.comments.slice();\r\n        //         this.setState({\r\n        //             comments: comment.concat(response),\r\n        //             submittingComment: false,\r\n        //             valueComment: ''\r\n        //         })\r\n        //     }).catch(error => {\r\n        //         if (error.status === 401) {\r\n        //             this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n        //         } else {\r\n        //             notification.error({\r\n        //                 message: 'Polling App',\r\n        //                 description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n        //             });\r\n        //         }\r\n        //     });\r\n        // this.setState({\r\n        //     submittingComment: false\r\n        // })\r\n    }\r\n    onComment = (page = 0, size = POLL_LIST_SIZE) => {\r\n        this.props.onComment(page, size, this.props.post.id, this.props.postIndex)\r\n    }\r\n    onReply = (index) => {\r\n        this.props.onReply(this.props.postIndex, index);\r\n        // const showReply = this.state.showReply;\r\n        // showReply[index] = !showReply[index];\r\n        // this.setState({\r\n        //     showReply: showReply\r\n        // })\r\n    }\r\n    handleChangeReply = (event) => {\r\n        this.props.handleChangeReply(event, this.props.postIndex);\r\n        // this.setState({\r\n        //     valueReply: event.target.value\r\n        // })\r\n    }\r\n    handleSubmitReply = (index) => {\r\n        this.props.handleSubmitReply(this.props.postIndex, index);\r\n        // if (!this.state.valueReply) {\r\n        //     return;\r\n        // }\r\n        // if (!this.props.isAuthenticated) {\r\n        //     this.props.history.push(\"/login\");\r\n        //     notification.info({\r\n        //         message: 'Polling App',\r\n        //         description: \"Please login to reply.\",\r\n        //     });\r\n        //     return;\r\n        // }\r\n        // const submittingReply = this.state.submittingReply;\r\n        // submittingReply[index] = true;\r\n        // this.setState({\r\n        //     submittingReply: submittingReply,\r\n        // });\r\n        // replyComment(this.props.post.id, this.state.comments[index].id, this.state.valueReply)\r\n        //     .then(response => {\r\n        //         const comment = this.state.comments.slice();\r\n        //         comment.forEach((cm, index) => {\r\n        //             if (cm.id === response.id) {\r\n        //                 comment[index] = response;\r\n        //             }\r\n        //         })\r\n        //         const submittingReply2 = this.state.submittingReply;\r\n        //         submittingReply2[index] = false;\r\n        //         this.setState({\r\n        //             comments: comment,\r\n        //             submittingReply: submittingReply2,\r\n        //             valueReply: ''\r\n        //         })\r\n        //     }).catch(error => {\r\n        //         if (error.status === 401) {\r\n        //             this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n        //         } else {\r\n        //             notification.error({\r\n        //                 message: 'Polling App',\r\n        //                 description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n        //             });\r\n        //         }\r\n        //     });\r\n    }\r\n    onClickUpdateName = () => {\r\n        this.setState({\r\n            isUpdateName: !this.state.isUpdateName\r\n        })\r\n    }\r\n    onChangeName = (event) => {\r\n        this.setState({\r\n            valueName: event.target.value\r\n        })\r\n    }\r\n    updateName = () => {\r\n        this.setState({\r\n            isUpdateName: !this.state.isUpdateName\r\n        })\r\n        this.props.updateName(this.state.valueName, this.props.postIndex);\r\n    }\r\n    render() {\r\n        const { comments, submittingComment, valueComment, showReply } = this.props;\r\n        const commentViews = [];\r\n        const loadMore = this.props.showComment && comments.length > 0&&!this.props.isLastComment && <Link to=\"#\" onClick={() => this.props.onLoadMoreComment(this.props.pageComment + 1, POLL_LIST_SIZE, this.props.post.id, this.props.postIndex)}>Load More...</Link>\r\n        commentViews.push(<List\r\n        key={1}\r\n            dataSource={comments}\r\n            loadMore={loadMore}\r\n            // header={`${comments.length} ${comments.length > 1 ? 'replies' : 'reply'}`}\r\n            itemLayout=\"horizontal\"\r\n            renderItem={(props, index) => <List.Item key={index} style={{display:\"block\"}}><Comment\r\n                actions={this.props.currentUser!=null&&(props.user.username === this.props.currentUser.username || this.props.post.createdBy.username === this.props.currentUser.username) ? [<span key=\"comment-nested-reply-to\" onClick={() => this.onReply(index)}>Reply to</span>, <span key=\"delete-comment\" onClick={() => this.props.onDeleteComment(this.props.postIndex, index)}>Delete</span>] : [<span key=\"comment-nested-reply-to\" onClick={() => this.onReply(index)}>Reply to</span>]}\r\n                author={<Link to={`/users/${props.user.username}`}>{props.user.name}</Link>} avatar={props.user.photo == null ? <Link to={`/users/${props.user.username}`}><Avatar\r\n                    style={{ backgroundColor: getAvatarColor(props.user.name) }} >\r\n                    {props.user.name[0].toUpperCase()}\r\n                </Avatar></Link> : <Link to={`/users/${props.user.username}`}><Avatar\r\n                    //src={API_BASE_URL + \"/file/getImage/\" + props.user.photo} \r\n                    src={\"https://drive.google.com/uc?export=view&id=\"+props.user.photo}\r\n                    >\r\n                </Avatar></Link>} content={<p>{props.text}</p>} datetime={getTime(props.createDate)}>\r\n                {props.replys !== null && props.replys.length !== 0 && <List\r\n                    rowKey={record => record.id}\r\n                    dataSource={props.replys}\r\n                    itemLayout=\"horizontal\"\r\n                    renderItem={(reply, replyIndex) => <List.Item key={replyIndex}><Comment actions={this.props.currentUser!=null&&(reply.user.username === this.props.currentUser.username || this.props.post.createdBy.username === this.props.currentUser.username) && [<span key=\"delete-reply\" onClick={() => this.props.onDeleteReply(this.props.postIndex, index, replyIndex)}>Delete</span>]} author={<Link to={`/users/${reply.user.username}`}>{reply.user.name}</Link>} avatar={reply.user.photo == null ? <Link to={`/users/${reply.user.username}`}><Avatar\r\n                        style={{ backgroundColor: getAvatarColor(reply.user.name) }} >\r\n                        {reply.user.name[0].toUpperCase()}\r\n                    </Avatar></Link> : <Link to={`/users/${reply.user.username}`}><Avatar\r\n                        //src={API_BASE_URL + \"/file/getImage/\" + reply.user.photo} \r\n                        src={\"https://drive.google.com/uc?export=view&id=\"+reply.user.photo}\r\n                        >\r\n                    </Avatar></Link>} content={<p>{reply.text}</p>} datetime={getTime(reply.createDate)}>\r\n                    </Comment></List.Item>}\r\n                />}\r\n\r\n            </Comment>{showReply[index] && this.props.currentUser != null &&<Comment\r\n                avatar={this.props.currentUser.photo == null ?\r\n                    <Avatar\r\n                        style={{ backgroundColor: getAvatarColor(this.props.currentUser.name) }} >\r\n                        {this.props.currentUser.name[0].toUpperCase()}\r\n                    </Avatar> : <Avatar\r\n                        //src={API_BASE_URL + \"/file/getImage/\" + this.props.currentUser.photo} \r\n                        src={\"https://drive.google.com/uc?export=view&id=\"+this.props.currentUser.photo}\r\n                        >\r\n                    </Avatar>\r\n                }\r\n                content={\r\n                    <Editor\r\n                        onChange={this.handleChangeReply}\r\n                        onSubmit={() => this.handleSubmitReply(index)}\r\n                        submitting={this.props.submittingReply[index]}\r\n                        value={this.props.valueReply}\r\n                        textButton=\"Reply\"\r\n                    />\r\n                }\r\n            />}</List.Item>}\r\n        />\r\n           \r\n        )\r\n\r\n\r\n        const postView = [];\r\n        this.props.post.polls.forEach((poll, pollIndex) => {\r\n            const pollChoices = [];\r\n\r\n            if (poll.isExpired || (poll.totalUserVotes === poll.maxVotePerTimeLoad && poll.showResultCase === 3 && !poll.isCanFix)) {\r\n                const winningChoice = this.props.post.polls[pollIndex].expired ? this.getWinningChoice(pollIndex) : null;\r\n                poll.choices.forEach((choice, choiceIndex) => {\r\n                    pollChoices.push(<CompletedOrVotedPollChoice\r\n                        isUnseenUserForAddChoice={poll.isUnseenUserForAddChoice}\r\n                        key={choice.id}\r\n                        choice={choice}\r\n                        isWinner={winningChoice && choice.id === winningChoice.id}\r\n                        handleClickShowListVoted={() => this.props.handleShowListVoted(choice.id, 0, 5)}\r\n                        isSelected={this.isSelected(pollIndex, choiceIndex)}\r\n                        percentVote={this.calculatePercentage(choice, pollIndex)}\r\n                    />);\r\n                });\r\n\r\n            } else if (poll.showResultCase === 1 || (poll.totalUserVotes !== 0 && poll.showResultCase === 3 && !poll.isCanFix)) {\r\n                poll.choices.forEach((choice, choiceIndex) => {\r\n                    pollChoices.push(<CompletedOrVotedCanVotePollChoice\r\n                        key={choice.id}\r\n                        choice={choice}\r\n                        isUnseenUserForVote={poll.isUnseenUserForVote}\r\n                        isUnseenUserForAddChoice={poll.isUnseenUserForAddChoice}\r\n                        isSelected={this.isSelected(pollIndex, choiceIndex)}\r\n                        percentVote={this.calculatePercentage(choice, pollIndex)}\r\n                        handleClickShowListVoted={() => this.props.handleShowListVoted(choice.id)}\r\n                        handleClick={(event) => this.props.handleDeleteVoteSubmit(event, this.props.postIndex, pollIndex)}\r\n                        handleClickDelChoice={(event) => this.props.handleDeleteChoiceSubmit(event, this.props.postIndex, pollIndex)}\r\n                        isDelete={this.props.currentUser != null && ((this.props.currentUser.username === this.props.post.createdBy.username) || (this.props.currentUser.username === choice.createdBy.username)) && !poll.isExpired}\r\n                        isOwner={this.props.currentUser != null && (this.props.currentUser.username === this.props.post.createdBy.username)}\r\n                        canFix={poll.isCanFix}\r\n                    />)\r\n                })\r\n            }\r\n\r\n            else if (poll.showResultCase !== 1) {\r\n                poll.choices.forEach((choice, choiceIndex) => {\r\n                    pollChoices.push(\r\n                        <Popover placement=\"right\" key={choice.id} mouseEnterDelay={1}\r\n                            content={\r\n                                <div style={{ maxWidth: '500px', minWidth: '400px' }}>\r\n                                    {choice.choicePrime != null && choice.choicePrime.photo != null && choice.choicePrime.photo !== \"\" ? <Image\r\n                                        //src={API_BASE_URL + \"/file/getImage/\" + choice.choicePrime.photo}\r\n                                        src={\"https://drive.google.com/uc?export=view&id=\"+choice.choicePrime.photo}\r\n                                    /> : null}\r\n                                    {choice.choicePrime != null ? <div style={{ wordBreak: 'break-word' }}>{choice.choicePrime.review}</div> : null}\r\n                                </div>}\r\n                            title={\r\n                                <>{choice.text}{poll.isUnseenUserForAddChoice ? null : (<span className=\"separator\">•</span>)}{poll.isUnseenUserForAddChoice ? null : <Link className=\"creator-link\" to={`/users/${choice.createdBy.username}`}>{choice.createdBy.name}</Link>}\r\n                                </>}>\r\n                            <div>\r\n                                <Radio className=\"poll-choice-radio\" key={choice.id} value={choice.id}>\r\n                                    <span style={{ paddingLeft: \"20px\" }}>{choice.text}\r\n                                        {this.props.isAuthenticated && this.props.currentUser.username === this.props.post.createdBy.username && !poll.isExpired &&\r\n                                            <Tooltip title=\"Choice Delete\" placement=\"top\" arrowPointAtCenter={true}>\r\n                                                <Button type=\"dashed\" icon={<DeleteOutlined />} shape=\"circle\" value={choice.id} onClick={(event) => this.props.handleDeleteChoiceSubmit(event, this.props.postIndex, pollIndex)} size='small' className=\"delete-button-choice\" style={{ float: \"right\", marginRight: 10 }} /></Tooltip>}\r\n                                        {this.isSelected(pollIndex, choiceIndex) && poll.isCanFix &&\r\n                                            <Tooltip title=\"Vote Delete\" placement=\"top\" arrowPointAtCenter={true}>\r\n                                                <Button type=\"dashed\" icon={<MinusOutlined />} shape=\"circle\" value={choice.id} onClick={(event) => this.props.handleDeleteVoteSubmit(event, this.props.postIndex, pollIndex)} size='small' className=\"delete-button\" style={{ float: \"right\", marginRight: 3 }} /></Tooltip>}\r\n                                    </span>\r\n                                </Radio>\r\n                            </div>\r\n                        </Popover>\r\n\r\n                    )\r\n                })\r\n            }\r\n            postView.push(<PollItem key={pollIndex} postIndex={this.props.postIndex} choiceAdd={this.state.choiceAdd[pollIndex]}\r\n                poll={poll} pollIndex={pollIndex} pollChoices={pollChoices} choiceCanAdd={this.state.choiceCanAdd[pollIndex]} choiceNew={this.state.choiceNew[pollIndex]}\r\n                handleVoteChange={this.props.handleVoteChange} currentVote={this.props.currentVote} addChoiceInput={this.addChoiceInput}\r\n                createdBy={this.props.post.createdBy} creationDateTime={this.props.post.creationDateTime} addAChoice={this.addAChoice}\r\n                getTimeRemaining={this.getTimeRemaining} handleVoteSubmit={this.props.handleVoteSubmit} currentUser={this.props.currentUser}\r\n                isOwner={this.props.currentUser != null && (this.props.currentUser.username === this.props.post.createdBy.username)}\r\n                onEndPoll={this.props.onEndPoll}\r\n            />)\r\n        })\r\n        const time = getTime2(this.props.post.publicDate);\r\n        return (\r\n            <>\r\n                <Card style={{ marginBottom: 30 }} className=\"poll-content\"\r\n                // actions={[\r\n                //     <div onClick= {()=>this.props.onLikePost(this.props.postIndex)}>{this.props.post.isUserLike ? <HeartTwoTone twoToneColor=\"#eb2f96\" /> : <HeartOutlined key=\"like\" />}{this.props.post.totalLike != null ? <span className=\"separator\">•</span> : null}{this.props.post.totalLike}</div>,\r\n                //     <div onClick={(event) => console.log(\"comment\")}><MessageOutlined key=\"comment\" />{this.props.post.totalComment != null ? <span className=\"separator\">•</span> : null}{this.props.post.totalComment}</div>,\r\n                // ]}\r\n                >\r\n\r\n                    <div className=\"poll-header\">\r\n                        <Popover placement=\"right\" title=\"Tùy chọn\" content={<ManagerPost isUserStorage={this.props.post.isUserStorage} isOwner={this.props.currentUser != null && (this.props.currentUser.username === this.props.post.createdBy.username)} onUpdatePost={this.onClickUpdateName} onDeletePost={this.props.onDeletePost} deleteFollowPost={this.props.deleteFollowPost} onFollowPost={this.props.onFollowPost} postIndex={this.props.postIndex} />} trigger=\"click\">\r\n                            <Button type=\"text\" shape=\"circle\" className=\"poll-info\" icon={<MoreOutlined />}></Button>\r\n                        </Popover>\r\n                        <div className=\"poll-creator-info\">\r\n                            <Link className=\"creator-link\" to={`/users/${this.props.post.createdBy.username}`}>\r\n                                {this.props.post.createdBy.photo == null ? <Avatar className=\"poll-creator-avatar\"\r\n                                    style={{ backgroundColor: getAvatarColor(this.props.post.createdBy.name) }} >\r\n                                    {this.props.post.createdBy.name[0].toUpperCase()}\r\n                                </Avatar> : <Avatar className=\"poll-creator-avatar\"\r\n                                    //src={API_BASE_URL + \"/file/getImage/\" + this.props.post.createdBy.photo} \r\n                                    src={\"https://drive.google.com/uc?export=view&id=\"+this.props.post.createdBy.photo}\r\n                                    >\r\n                                </Avatar>}\r\n                                <span className=\"poll-creator-name\">\r\n                                    {this.props.post.createdBy.name}\r\n                                </span>\r\n                                <span className=\"poll-creator-username\">\r\n                                    @{this.props.post.createdBy.username}\r\n                                </span>\r\n                                {time !== '' && <span className=\"separator\">•</span>}\r\n                                {time !== '' && <span>{time}</span>}\r\n                            </Link>\r\n\r\n                            <Link to={\"/post/\" + this.props.post.id}>\r\n                                <span className=\"poll-creation-date\">\r\n                                    {getTime(this.props.post.polls[0].creationDateTime)}\r\n                                    {/* {formatDateTime(this.props.post.polls[0].creationDateTime)} */}\r\n                                </span></Link>\r\n                            <span className=\"separator\">•</span>\r\n                            <span className=\"poll-creation-date\">\r\n                                {this.props.post.showCase === 1 ? \"Bí mật\" : null}\r\n                                {this.props.post.showCase === 2 ? \"Riêng tư\" : null}\r\n                                {this.props.post.showCase === 3 ? \"Công khai\" : null}\r\n                                {this.props.post.showCase === 4 ? \"Giới hạn người\" : null}\r\n                                {this.props.post.showCase === 5 ? <Popover placement=\"right\" id=\"grouplist\" title=\"Danh sách nhóm\" content={<InfomationGroups list={this.props.post.groupResponses}></InfomationGroups>} trigger=\"click\"><Button type=\"text\" className=\"poll-show-case-button\">Nhóm</Button></Popover> : null}\r\n                            </span>\r\n\r\n\r\n                        </div>\r\n\r\n                        <div className=\"poll-question\">\r\n                            {this.state.isUpdateName ? <TextArea value={this.state.valueName} onChange={this.onChangeName}></TextArea> : <>{this.props.post.question}</>}\r\n                        </div>\r\n                        {this.state.isUpdateName && <Button style={{ marginBottom: 15 }} onClick={this.updateName}>Update</Button>}\r\n                        {postView}\r\n                    </div>\r\n                    <ul className=\"ant-card-actions\">\r\n                        <li style={{ width: \"50%\", cursor: \"pointer\" }}>\r\n                            <div onClick={() => this.props.onLikePost(this.props.postIndex)}>{this.props.post.isUserLike ? <HeartTwoTone twoToneColor=\"#eb2f96\" /> : <HeartOutlined key=\"like\" />}{this.props.post.totalLike != null ? <span className=\"separator\">•</span> : null}{this.props.post.totalLike}</div>\r\n                        </li>\r\n                        <li style={{ width: \"50%\", cursor: \"pointer\" }}>\r\n                            <div onClick={(event) => this.onComment()}><MessageOutlined key=\"comment\" />{this.props.post.totalComment != null ? <span className=\"separator\">•</span> : null}{this.props.post.totalComment}</div>\r\n                        </li>\r\n                    </ul>\r\n                    {this.props.showComment && <Divider style={{ margin: \"0\" }} />}\r\n\r\n                    {this.props.showComment && this.props.currentUser != null && <Comment\r\n                        avatar={this.props.currentUser.photo == null ?\r\n                            <Avatar\r\n                                style={{ backgroundColor: getAvatarColor(this.props.currentUser.name) }} >\r\n                                {this.props.currentUser.name[0].toUpperCase()}\r\n                            </Avatar> : <Avatar\r\n                                //src={API_BASE_URL + \"/file/getImage/\" + this.props.currentUser.photo} \r\n                                src={\"https://drive.google.com/uc?export=view&id=\"+this.props.currentUser.photo}\r\n                                >\r\n                            </Avatar>\r\n                        }\r\n                        content={\r\n                            <Editor\r\n                                onChange={this.handleChangeComment}\r\n                                onSubmit={this.handleSubmitComment}\r\n                                submitting={submittingComment}\r\n                                value={valueComment}\r\n                                textButton=\"Comment\"\r\n                            />\r\n                        }\r\n                    />}\r\n                    {this.props.showComment && comments.length > 0 && commentViews }\r\n                    {/* {this.props.showComment && comments.length > 0&&!this.props.isLastComment && <Link to=\"#\" onClick={() => this.props.onLoadMoreComment(this.props.pageComment + 1, POLL_LIST_SIZE, this.props.post.id, this.props.postIndex)}>Load More...</Link>} */}\r\n\r\n\r\n                </Card>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\nfunction ManagerPost(props) {\r\n    return (\r\n        <div>\r\n            {props.isOwner&&<Button type=\"primary\" style={{ marginBottom: \"10px\" }} block onClick={() => props.onUpdatePost(props.postIndex)}>Cập nhật</Button>}\r\n            {!props.isUserStorage?<Button type=\"primary\" style={{ marginBottom: \"10px\" }} block onClick={() => props.onFollowPost(props.postIndex)}>Lưu trữ</Button>:<Button type=\"primary\" style={{ marginBottom: \"10px\" }} block onClick={() => props.deleteFollowPost(props.postIndex)}>Hủy Lưu trữ</Button>}\r\n            <Button danger block onClick={() => props.onDeletePost(props.postIndex)}>Delete post</Button>\r\n        </div>\r\n    );\r\n}\r\nfunction InfomationGroups(props) {\r\n\r\n    return (\r\n        <div className=\"popInforPoll\">\r\n            <List\r\n                dataSource={props.list}\r\n                renderItem={item => (\r\n                    <List.Item>\r\n                        <List.Item.Meta\r\n                            title={<Link to={`/groups/${item.code}`}>{item.name} <span style={{ color: '#657786' }}>@{item.code}</span></Link>}\r\n                            description={<div><div><span>Người tạo: <Link to={`/users/${item.admin.username}`}>{item.admin.name} @{item.admin.username}</Link></span></div><div>Ngày tạo: {formatDateTime(item.createDate)}</div></div>}\r\n                        />\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nfunction Infomation(props) {\r\n    return (\r\n        <div className=\"popInforPoll\">\r\n            <Row gutter={[24, 8]}>\r\n                <Col span={12}>Bầu chọn ẩn danh&nbsp;\r\n                </Col> <Col span={12}>{props.poll.isUnseenUserForVote ? <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" defaultChecked disabled={true} /> : <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" disabled={true} />}\r\n                </Col><Col span={12}>Cho phép thêm lựa chọn&nbsp;\r\n                </Col><Col span={12}>{props.poll.isAddChoice ? <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" defaultChecked disabled={true} /> : <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" disabled={true} />}\r\n                </Col>\r\n                {props.poll.isAddChoice ? (<Col span={12}>Người thêm lựa chọn bị ẩn danh&nbsp;</Col>) : null}\r\n                {props.poll.isAddChoice ? (<Col span={12}>{props.poll.isUnseenUserForAddChoice ? <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" disabled={true} defaultChecked /> : <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" disabled={true} />}\r\n                </Col>) : null}<Col span={12}>Cho phép sửa lựa chọn&nbsp;\r\n                </Col><Col span={12}>{props.poll.isCanFix ? <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" disabled={true} defaultChecked /> : <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" disabled={true} />}\r\n                </Col>\r\n                <Col span={12}>Số lượng phiếu bầu tối đa:</Col>\r\n                <Col span={12}>{props.poll.maxVotePerTimeLoad}\r\n                    &nbsp;Lần</Col>\r\n                <Col span={12}>Mỗi lựa chọn được bầu tối đa:</Col>\r\n                <Col span={12}>{props.poll.maxVotePerChoice}\r\n                    &nbsp;Lần</Col>\r\n                {props.poll.timeLoad === 0 ? null : (<Col span={12}>Số lượng phiếu bầu tối đa 2:</Col>)}\r\n                {props.poll.timeLoad === 0 ? null : (\r\n\r\n                    <Col span={12}>{props.poll.maxVoteOfPoll}\r\n                        &nbsp;Lần</Col>)\r\n                }\r\n                {props.poll.timeLoad === 0 ? null : <Col span={12}>\r\n                    Thời gian được thiết lập lại số phiếu:\r\n                </Col>}\r\n                {props.poll.timeLoad === 0 ? null : <Col span={12}>\r\n                    <span style={{ marginRight: '18px' }}>\r\n                        {Math.floor(props.poll.timeLoad / 24)}\r\n                        &nbsp;Days\r\n                    </span>\r\n                    <span>\r\n                        {props.poll.timeLoad % 24}\r\n                        &nbsp;Hours\r\n                    </span>\r\n                </Col>}\r\n                <Col span={12}>\r\n                    Chế độ hiển thị kết quả:\r\n                </Col>\r\n                <Col span={12}>\r\n                    {props.poll.showResultCase === 1 ? 'Được xem ngay' : null}\r\n                    {props.poll.showResultCase === 2 ? 'Sau khi kết thúc' : null}\r\n                    {props.poll.showResultCase === 3 ? 'Sau khi bầu' : null}\r\n                    {props.poll.showResultCase === 4 ? 'Không được xem' : null}\r\n\r\n                </Col></Row>\r\n            {!props.poll.isExpired && props.isOwner ? <Button onClick={(event) => props.onEndPoll(event, props.postIndex, props.pollIndex)} block danger>Kết thúc bầu chọn</Button> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction PollItem(props) {\r\n    return (\r\n        <div className=\"poll-content\">\r\n            <div className=\"poll-header\">\r\n                <div className=\"text-number\">\r\n                    {props.pollIndex + 1}.\r\n                </div>\r\n                <Popover placement=\"right\" title=\"Infomation\" content={<Infomation poll={props.poll} onEndPoll={props.onEndPoll} isOwner={props.isOwner} pollIndex={props.pollIndex} postIndex={props.postIndex}></Infomation>} trigger=\"click\">\r\n                    <Button type=\"text\" shape=\"circle\" className=\"poll-info\" icon={<MoreOutlined />}></Button>\r\n                </Popover>\r\n                <div className=\"poll-question\">\r\n                    {props.poll.question}\r\n                </div>\r\n                {(props.poll.photo !== null && props.poll.photo !== '') && <Image\r\n//  src={props.poll.photo} https://drive.google.com/uc?export=view&id=10JehIGbJdThrsGzXV7dHxsDhjFjRryiX\r\nsrc={\"https://drive.google.com/uc?export=view&id=\"+props.poll.photo}\r\n// src=\"https://drive.google.com/uc?id=1OqevuFEaO5XyT5Uxm1DcQ5t0DoeG0Ini&export=download\"\r\n                    // src={API_BASE_URL + \"/file/getImage/\" + props.poll.photo}\r\n                /> }\r\n\r\n                {/* <Image src=\"https://zos.alipayobjects.com/rmsportal/jkjgkEfvpUPVyRjUImniVslZfWPnJuuZ.png\"/> */}\r\n            </div>\r\n            <div className=\"poll-choices\">\r\n                <RadioGroup\r\n                    className=\"poll-choice-radio-group\"\r\n                    onChange={(event) => props.handleVoteChange(event, props.pollIndex, props.postIndex)}\r\n                    value={props.currentVote[props.pollIndex]}>\r\n                    {props.pollChoices}\r\n                </RadioGroup>\r\n                {props.choiceCanAdd ? null : <Form><FormItem validateStatus={props.choiceNew.validateStatus}\r\n                    help={props.choiceNew.errorMsg}>{props.choiceAdd}</FormItem></Form>}\r\n\r\n            </div>\r\n            <div className=\"poll-footer\">\r\n                {\r\n                    !(props.poll.selectedChoice || props.poll.isExpired) ?\r\n                        (<Button className=\"vote-button\" disabled={!props.currentVote[props.pollIndex]} onClick={(event) => props.handleVoteSubmit(event, props.pollIndex, props.postIndex)}>Vote</Button>) : null\r\n                }\r\n                <span className=\"total-votes\">{props.poll.totalVotes} votes</span>\r\n                <span className=\"separator\">•</span>\r\n                <span className=\"time-left\">\r\n                    {\r\n                        props.poll.isExpired ? \"Final results\" :\r\n                            props.getTimeRemaining(props.poll)\r\n                    }\r\n                </span>\r\n                {\r\n                    (props.currentUser != null && props.choiceCanAdd && (props.poll.isAddChoice || props.createdBy.username === props.currentUser.username) && !props.poll.isExpired) && <Button type=\"dashed\" style={{ float: 'right' }} onClick={() => props.addChoiceInput(props.postIndex, props.pollIndex)} icon={<PlusOutlined />} disabled={!props.choiceCanAdd}>\r\n                        {window.screen.width > 768 && \"Add a choice\"}\r\n                    </Button>\r\n                }\r\n                {\r\n                    (!props.choiceCanAdd) && <Button type=\"dashed\" style={{ float: 'right' }} onClick={(event) => props.addAChoice(event, props.postIndex, props.pollIndex)} disabled={props.choiceCanAdd}>\r\n                        <PlusOutlined /> Submit\r\n                    </Button>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nfunction CompletedOrVotedPollChoice(props) {\r\n    const percent = Math.round(props.percentVote * 100) / 100;\r\n    return (\r\n        <Popover placement=\"right\" mouseEnterDelay={0.5} content={<div style={{ maxWidth: '500px', minWidth: '400px' }}>\r\n            {props.choice.choicePrime != null && props.choice.choicePrime.photo != null && props.choice.choicePrime.photo !== \"\" ? <Image\r\n                src={\"https://drive.google.com/uc?export=view&id=\"+props.choice.choicePrime.photo}\r\n                //src={API_BASE_URL + \"/file/getImage/\" + props.choice.choicePrime.photo}\r\n            /> : null}\r\n            {props.choice.choicePrime != null ? <div style={{ wordBreak: 'break-word' }}>{props.choice.choicePrime.review}</div> : null}\r\n        </div>} title={<>{props.choice.text}{props.isUnseenUserForAddChoice ? null : (<span className=\"separator\">•</span>)}{props.isUnseenUserForAddChoice ? null : <Link className=\"creator-link\" to={`/users/${props.choice.createdBy.username}`}>{props.choice.createdBy.name}</Link>}</>}>\r\n            <div className=\"cv-poll-choice\">\r\n                <span className=\"cv-poll-choice-details\">\r\n                    <span className=\"cv-choice-percentage\">\r\n                        {props.isUnseenUserForVote ? percent + '%' : <Button value={props.choice.id} style={{ fontWeight: 600 }} onClick={props.handleClickShowListVoted} type=\"text\">{Math.round(props.percentVote * 100) / 100}%</Button>}\r\n                        {/* {Math.round(props.percentVote * 100) / 100}% */}\r\n                    </span>\r\n                    <span className=\"cv-choice-text\">\r\n                        {props.choice.text}\r\n                    </span>\r\n                    {/* {\r\n                    props.isSelected ? (\r\n                        <span className=\"selected-choice-icon\">\r\n                            <CheckCircleOutlined />\r\n                        </span>) : null\r\n                } */}\r\n                </span>\r\n                <span className={props.isWinner ? 'cv-choice-percent-chart winner' : 'cv-choice-percent-chart'}\r\n                    style={{ width: props.percentVote + '%' }}>\r\n                </span>\r\n            </div></Popover>\r\n    );\r\n}\r\nfunction CompletedOrVotedCanVotePollChoice(props) {\r\n    const percent = Math.round(props.percentVote * 100) / 100;\r\n    return (\r\n        <Popover placement=\"right\" mouseEnterDelay={1} content={<div style={{ maxWidth: '500px', minWidth: '400px' }}>\r\n            {props.choice.choicePrime != null && props.choice.choicePrime.photo != null && props.choice.choicePrime.photo !== \"\" ? <Image\r\n                src={\"https://drive.google.com/uc?export=view&id=\"+props.choice.choicePrime.photo}\r\n                //src={API_BASE_URL + \"/file/getImage/\" + props.choice.choicePrime.photo}\r\n            /> : null}\r\n            {props.choice.choicePrime != null ? <div style={{ wordBreak: 'break-word' }}>{props.choice.choicePrime.review}</div> : null}\r\n        </div>} title={<>{props.choice.text}{props.isUnseenUserForAddChoice ? null : (<span className=\"separator\">•</span>)}{props.isUnseenUserForAddChoice ? null : <Link className=\"creator-link\" to={`/users/${props.choice.createdBy.username}`}>{props.choice.createdBy.name}</Link>}</>}>\r\n            <Badge count={props.choice.userVoteCount} offset={[-0, 0]} className=\"site-badge-count-4\">\r\n\r\n                <Radio className=\"poll-choice-radio\" key={props.choice.id} value={props.choice.id}>\r\n\r\n                    <span className=\"cv-poll-choice-details2\">\r\n                        <span className=\"cv-choice-percentage\">\r\n                            {props.isUnseenUserForVote && !props.isOwner ? percent + '%' : <Button value={props.choice.id} style={{ fontWeight: 600 }} onClick={props.handleClickShowListVoted} type=\"text\">{Math.round(props.percentVote * 100) / 100}%</Button>}\r\n                            {/* {Math.round(props.percentVote * 100) / 100}% */}\r\n                        </span>\r\n                        <span className=\"cv-choice-text\">\r\n                            {props.choice.text}\r\n                        </span>\r\n                    </span>\r\n\r\n                    <span className={props.isSelected ? \"cv-choice-percent-chart2 winner\" : \"cv-choice-percent-chart2\"}\r\n                        style={{ width: props.percentVote + '%' }}>\r\n                    </span>\r\n\r\n                    {/* {\r\n                                props.isDelete ? (\r\n                                    <Tooltip title=\"Choice Delete\" placement=\"top\" arrowPointAtCenter={true}>\r\n\r\n                                        <Button type=\"dashed\" style={{ marginRight: 10 }} shape=\"circle\" icon={<DeleteOutlined />} value={props.choice.id} onClick={props.handleClickDelChoice} size='small' className=\"delete-button-choice\" /> </Tooltip>\r\n                                ) : null\r\n                            }\r\n                            {\r\n                                props.isSelected && props.canFix ? (\r\n                                    <Tooltip title=\"Vote Delete\" placement=\"top\" arrowPointAtCenter={true}>\r\n                                        <Button type=\"dashed\" style={{ marginRight: 3 }} shape=\"circle\" icon={<MinusOutlined />} value={props.choice.id} onClick={props.handleClick} size='small' className=\"delete-button\" /> </Tooltip>\r\n                                ) : null\r\n                            } */}\r\n                    {props.isDelete &&\r\n                        <Tooltip title=\"Choice Delete\" placement=\"top\" arrowPointAtCenter={true}><Button type=\"dashed\" icon={<DeleteOutlined />} shape=\"circle\" value={props.choice.id} onClick={props.handleClickDelChoice} size='small' className=\"delete-button-choice\" style={{ float: \"right\", marginRight: 10 }} /></Tooltip>}\r\n                    {props.isSelected && props.canFix &&\r\n                        <Tooltip title=\"Vote Delete\" placement=\"top\" arrowPointAtCenter={true}><Button type=\"dashed\" icon={<MinusOutlined />} shape=\"circle\" value={props.choice.id} onClick={props.handleClick} size='small' className=\"delete-button\" style={{ float: \"right\", marginRight: 3 }} /></Tooltip>}\r\n                </Radio>\r\n\r\n            </Badge></Popover>\r\n    );\r\n}\r\n\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Spin} from 'antd';\r\nimport { Loading3QuartersOutlined } from '@ant-design/icons';\r\nexport default function LoadingIndicator(props) {\r\n    const antIcon = <Loading3QuartersOutlined style={{ fontSize: 30 }} spin />;\r\n    return (\r\n        <Spin indicator={antIcon} style = {{display: 'block', textAlign: 'center', marginTop: 30}} />\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { getAllPolls, getUserCreatedPolls, getUserVotedPolls, getOnePolls, getAllPollsOfGroup, getAllUserVotedChoice, deletePost } from '../util/APIUtils';\r\nimport Post from './Post';\r\nimport { Avatar } from 'antd';\r\nimport { getAvatarColor } from '../util/Colors';\r\nimport { castVote, commentPost,deleteSavePost,savePost,getUserSavedPolls, getAllComment, replyComment,deleteComment,deleteReply } from '../util/APIUtils';\r\nimport { deleteVote, deleteChoice, addChoice, endPoll, castLike, getAllPollsSearch, updatePostName } from '../util/APIUtils';\r\nimport LoadingIndicator from '../common/LoadingIndicator';\r\nimport { Button, notification, Modal, List } from 'antd';\r\nimport { API_BASE_URL, POLL_LIST_SIZE, USER_LIST_SIZE, ACCESS_TOKEN } from '../constants';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { VerticalAlignTopOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport './PostList.css';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { BackTop } from 'antd';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nclass PostList extends Component {\r\n    _isMounted = false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts: [],\r\n            page: 0,\r\n            size: 10,\r\n            totalElements: 0,\r\n            totalPages: 0,\r\n            last: false,\r\n            currentVotes: [],\r\n            isLoading: false,\r\n            visible: false,\r\n            currentPollIndex: 0,\r\n            currentPostIndex: 0,\r\n            currentValue: '',\r\n            prevY: 0,\r\n            visibleListVoted: false,\r\n            votedUsers: [],\r\n            pageVoted: 0,\r\n            currentChoiceId: 0,\r\n            isLoading2: false,\r\n            last2: false,\r\n            stompClient: null,\r\n            check: 0,\r\n            visiblePost: false,\r\n\r\n            comments: [],\r\n            submittingComment: [],\r\n            valueComment: [],\r\n            showComment: [],\r\n            showReply: [],\r\n            valueReply: [],\r\n            submittingReply: [],\r\n            pageComment: [],\r\n            isLastComment: [],\r\n\r\n            visibleCommentDelete: false,\r\n            currentCommentIndex: 0,\r\n\r\n            visibleReplyDelete: false,\r\n            currentReplyIndex: 0,\r\n        };\r\n        this.loadPostList = this.loadPostList.bind(this);\r\n        this.handleLoadMore = this.handleLoadMore.bind(this);\r\n        this.handleVoteChange = this.handleVoteChange.bind(this);\r\n        this.handleVoteSubmit = this.handleVoteSubmit.bind(this);\r\n    }\r\n    addAChoice = (event, postIndex, pollIndex, data) => {\r\n        event.preventDefault();\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to add Choice.\",\r\n            });\r\n            return;\r\n        }\r\n        const pollId = this.state.posts[postIndex].polls[pollIndex].id;\r\n        const addDataChoice = {\r\n            text: data.text,\r\n            review: data.review,\r\n            photo: data.photo\r\n        }\r\n        addChoice(addDataChoice, pollId)\r\n            .then(response => {\r\n                const posts = this.state.posts.slice();\r\n                posts[postIndex] = response;\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        posts: posts\r\n                    });\r\n                }\r\n\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    handleChangeComment = (event, postIndex) => {\r\n        const valueComment = this.state.valueComment;\r\n        valueComment[postIndex] = event.target.value;\r\n        this.setState({\r\n            valueComment: valueComment\r\n        })\r\n    }\r\n    handleSubmitComment = (postIndex) => {\r\n        if (!this.state.valueComment[postIndex]) {\r\n            return;\r\n        }\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to comment.\",\r\n            });\r\n            return;\r\n        }\r\n        const submittingComment = this.state.submittingComment;\r\n        submittingComment[postIndex] = true;\r\n        this.setState({\r\n            submittingComment: submittingComment,\r\n        });\r\n        commentPost(this.state.posts[postIndex].id, this.state.valueComment[postIndex])\r\n            .then(response => {\r\n                const comments = this.state.comments.slice();\r\n                comments[postIndex] = comments[postIndex].concat(response);\r\n                const posts = this.state.posts.slice();\r\n                posts[postIndex].totalComment++;\r\n                const valueComment = this.state.valueComment.slice();\r\n                valueComment[postIndex] = '';\r\n                this.setState({\r\n                    comments: comments,\r\n                    valueComment: valueComment,\r\n                    posts: posts\r\n                })\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n        submittingComment[postIndex] = false;\r\n        this.setState({\r\n            submittingComment: submittingComment\r\n        })\r\n    }\r\n    onComment = (page = 0, size = POLL_LIST_SIZE, postId, postIndex) => {\r\n        if (!this.state.showComment[postIndex]) {\r\n            this.onLoadMoreComment(page,size,postId,postIndex);\r\n            // if (this.state.pageComment[postIndex] === page) {\r\n            //     getAllComment(postId, page, size)\r\n            //         .then(response => {\r\n            //             const comment = response.content;\r\n            //             const comments = this.state.comments.slice();\r\n            //             comments[postIndex] = comment;\r\n            //             const showReply = this.state.showReply.slice();\r\n            //             showReply[postIndex] = Array(comment.length).fill(false);\r\n            //             const submittingReply = this.state.submittingReply.slice();\r\n            //             submittingReply[postIndex] = Array(comment.length).fill(false);\r\n            //             const pageComment = this.state.pageComment.slice();\r\n            //             pageComment[postIndex] = response.page;\r\n            //             const isLastComment = this.state.isLastComment.slice();\r\n            //             isLastComment[postIndex] = response.last;\r\n            //             this.setState({\r\n            //                 comments: comments,\r\n            //                 showReply: showReply,\r\n            //                 submittingReply: submittingReply,\r\n            //                 pageComment: pageComment,\r\n            //                 isLastComment: isLastComment\r\n            //             })\r\n            //         }).catch(error => {\r\n            //             if (error.status === 401) {\r\n            //                 this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n            //             } else {\r\n            //                 notification.error({\r\n            //                     message: 'Polling App',\r\n            //                     description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            //                 });\r\n            //             }\r\n            //         });\r\n            // }\r\n            // else {\r\n            //     getAllComment(this.props.post.id, page, size)\r\n            //         .then(response => {\r\n            //             const comment = this.state.comments[postIndex].slice().concat(response.content);\r\n            //             const comments = this.state.comments.slice();\r\n            //             comments[postIndex] = comment;\r\n            //             const showReply = this.state.showReply.slice();\r\n            //             showReply[postIndex] = Array(comment.length).fill(false);\r\n            //             const submittingReply = this.state.submittingReply.slice();\r\n            //             submittingReply[postIndex] = Array(comment.length).fill(false);\r\n            //             const pageComment = this.state.pageComment.slice();\r\n            //             pageComment[postIndex] = response.page;\r\n            //             const isLastComment = this.state.isLastComment.slice();\r\n            //             isLastComment[postIndex] = response.last;\r\n            //             this.setState({\r\n            //                 comments: comments,\r\n            //                 showReply: showReply,\r\n            //                 submittingReply: submittingReply,\r\n            //                 pageComment: pageComment,\r\n            //                 isLastComment: isLastComment\r\n            //             })\r\n            //         }).catch(error => {\r\n            //             if (error.status === 401) {\r\n            //                 this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n            //             } else {\r\n            //                 notification.error({\r\n            //                     message: 'Polling App',\r\n            //                     description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            //                 });\r\n            //             }\r\n            //         });\r\n            // }\r\n\r\n        }\r\n        const showComment = this.state.showComment.slice();\r\n        showComment[postIndex] = !showComment[postIndex];\r\n        this.setState({\r\n            showComment: showComment\r\n        })\r\n    }\r\n    onLoadMoreComment = (page = 0, size = POLL_LIST_SIZE, postId, postIndex) =>{\r\n        if (this.state.pageComment[postIndex] === page) {\r\n            getAllComment(postId, page, size)\r\n                .then(response => {\r\n                    const comment = response.content;\r\n                    const comments = this.state.comments.slice();\r\n                    comments[postIndex] = comment;\r\n                    const showReply = this.state.showReply.slice();\r\n                    showReply[postIndex] = Array(comment.length).fill(false);\r\n                    const submittingReply = this.state.submittingReply.slice();\r\n                    submittingReply[postIndex] = Array(comment.length).fill(false);\r\n                    const pageComment = this.state.pageComment.slice();\r\n                    pageComment[postIndex] = response.page;\r\n                    const isLastComment = this.state.isLastComment.slice();\r\n                    isLastComment[postIndex] = response.last;\r\n                    this.setState({\r\n                        comments: comments,\r\n                        showReply: showReply,\r\n                        submittingReply: submittingReply,\r\n                        pageComment: pageComment,\r\n                        isLastComment: isLastComment\r\n                    })\r\n                }).catch(error => {\r\n                    if (error.status === 401) {\r\n                        this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                    } else {\r\n                        notification.error({\r\n                            message: 'Polling App',\r\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n        else {\r\n            getAllComment(postId, page, size)\r\n                .then(response => {\r\n                    const comment = this.state.comments[postIndex].slice().concat(response.content);\r\n                    const comments = this.state.comments.slice();\r\n                    comments[postIndex] = comment;\r\n                    const showReply = this.state.showReply.slice();\r\n                    showReply[postIndex] = Array(comment.length).fill(false);\r\n                    const submittingReply = this.state.submittingReply.slice();\r\n                    submittingReply[postIndex] = Array(comment.length).fill(false);\r\n                    const pageComment = this.state.pageComment.slice();\r\n                    pageComment[postIndex] = response.page;\r\n                    const isLastComment = this.state.isLastComment.slice();\r\n                    isLastComment[postIndex] = response.last;\r\n                    this.setState({\r\n                        comments: comments,\r\n                        showReply: showReply,\r\n                        submittingReply: submittingReply,\r\n                        pageComment: pageComment,\r\n                        isLastComment: isLastComment\r\n                    })\r\n                }).catch(error => {\r\n                    if (error.status === 401) {\r\n                        this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                    } else {\r\n                        notification.error({\r\n                            message: 'Polling App',\r\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                        });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    onReply = (postIndex, index) => {\r\n        const showReply = this.state.showReply;\r\n        showReply[postIndex][index] = !showReply[postIndex][index];\r\n        this.setState({\r\n            showReply: showReply\r\n        })\r\n    }\r\n    handleChangeReply = (event, postIndex) => {\r\n        const valueReply = this.state.valueReply.splice();\r\n        valueReply[postIndex] = event.target.value;\r\n        this.setState({\r\n            valueReply: valueReply\r\n        })\r\n    }\r\n    handleSubmitReply = (postIndex, index) => {\r\n        if (!this.state.valueReply[postIndex]) {\r\n            return;\r\n        }\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to reply.\",\r\n            });\r\n            return;\r\n        }\r\n        const submittingReply = this.state.submittingReply;\r\n        submittingReply[postIndex][index] = true;\r\n        this.setState({\r\n            submittingReply: submittingReply,\r\n        });\r\n        replyComment(this.state.posts[postIndex].id, this.state.comments[postIndex][index].id, this.state.valueReply[postIndex])\r\n            .then(response => {\r\n                const comment = this.state.comments.slice()[postIndex];\r\n                comment.some((cm, index) => {\r\n                    if (cm.id === response.commentId) {\r\n                        comment[index].replys = comment[index].replys.concat(response);\r\n                    }\r\n                    return cm.id === response.commentId;\r\n                })\r\n                const comments = this.state.comments;\r\n                comments[postIndex] = comment;\r\n                const submittingReply2 = this.state.submittingReply;\r\n                submittingReply2[postIndex][index] = false;\r\n                const valueReply = this.state.valueReply;\r\n                valueReply[postIndex] = false;\r\n                this.setState({\r\n                    comments: comments,\r\n                    submittingReply: submittingReply2,\r\n                    valueReply: valueReply\r\n                })\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    loadPostList = (page = 0, size = POLL_LIST_SIZE) => {\r\n        let promise;\r\n\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                isLoading: true\r\n            });\r\n        }\r\n        switch (this.props.type) {\r\n            case 'GROUP':\r\n                promise = getAllPollsOfGroup(this.props.match.params.code, page, size);\r\n                break;\r\n            case 'ONE_POST':\r\n                promise = getOnePolls(this.props.match.params.id);\r\n                break;\r\n            case 'USER_CREATED_POSTS':\r\n                promise = getUserCreatedPolls(this.props.username, page, size);\r\n                break;\r\n            case 'USER_VOTED_POSTS':\r\n                promise = getUserVotedPolls(this.props.username, page, size);\r\n                break;\r\n            case 'SEARCH_POST':\r\n                promise = getAllPollsSearch(this.props.match.params.search, page, size);\r\n                break;\r\n            case 'USER_SAVE_POSTS':\r\n                promise = getUserSavedPolls(page, size);\r\n                break;\r\n            default:\r\n                promise = getAllPolls(page, size);\r\n\r\n        }\r\n        // if (this.props.type === 'GROUP') {\r\n        //     promise = getAllPollsOfGroup(this.props.match.params.code, page, size);\r\n        // }\r\n        // else if (this.props.type === 'ONE_POST') {\r\n        //     promise = getOnePolls(this.props.match.params.id);\r\n        // }\r\n        // else if (this.props.type === 'USER_CREATED_POSTS') {\r\n        //     promise = getUserCreatedPolls(this.props.username, page, size);\r\n        // }\r\n        // else if (this.props.type === 'USER_VOTED_POSTS') {\r\n        //     promise = getUserVotedPolls(this.props.username, page, size);\r\n        // }\r\n        // else if (this.props.type === 'SEARCH_POST') {\r\n        //     promise = getAllPollsSearch(this.props.match.params.search, page, size);\r\n        // }\r\n        // else {\r\n        //     promise = getAllPolls(page, size);\r\n        // }\r\n\r\n        if (!promise) {\r\n            return;\r\n        }\r\n\r\n        promise\r\n            .then(response => {\r\n                //console.log(response);\r\n\r\n                const posts = this.state.posts.slice();\r\n\r\n                const currentVotes = this.state.currentVotes.slice();\r\n\r\n                const currentVotes2 = currentVotes.concat(Array(response.content.length).fill(null))\r\n                const comments = this.state.comments.slice().concat(Array(response.content.length).fill([]));\r\n                const submittingComment = this.state.submittingComment.slice().concat(Array(response.content.length).fill(false));\r\n                const valueComment = this.state.valueComment.slice().concat(Array(response.content.length).fill(''));\r\n                const showComment = this.state.showComment.slice().concat(Array(response.content.length).fill(false));\r\n                const showReply = this.state.showReply.slice().concat(Array(response.content.length).fill([]));\r\n                const valueReply = this.state.valueReply.slice().concat(Array(response.content.length).fill(''));\r\n                const submittingReply = this.state.submittingReply.slice().concat(Array(response.content.length).fill([]));\r\n                const pageComment = this.state.pageComment.slice().concat(Array(response.content.length).fill(0));\r\n                const isLastComment = this.state.isLastComment.slice().concat(Array(response.content.length).fill(false));\r\n                response.content.forEach((post, index) => {\r\n                    // if (this.props.isAuthenticated) {\r\n                    //     this.state.stompClient.send('/app/start', {}, post.id);\r\n                    // }\r\n                    currentVotes2[posts.length + index] = Array(post.polls.length).fill(null)\r\n                })\r\n                posts.concat(response.content)\r\n                // posts.concat(response.content).forEach((post, index) => {\r\n                //     if (this.props.isAuthenticated) {\r\n                //         this.state.stompClient.send('/app/start', {}, post.id);\r\n                //     }\r\n                //     currentVotes2[index] = Array(post.polls.length).fill(null)\r\n                // })\r\n                //console.log(this.state.page)\r\n                //console.log(response.page)\r\n                // console.log(this.state.check)\r\n                if (this.state.page === response.page && this.state.check === 0) {\r\n                    if (this._isMounted) {\r\n                        //console.log(\"setState1\")\r\n                        this.setState({\r\n                            posts: posts.concat(response.content),\r\n                            page: response.page,\r\n                            size: response.size,\r\n                            totalElements: response.totalElements,\r\n                            totalPages: response.totalPages,\r\n                            last: response.last,\r\n                            currentVotes: currentVotes2,\r\n                            isLoading: false,\r\n                            check: 1,\r\n                            comments: comments,\r\n                            submittingComment: submittingComment,\r\n                            valueComment: valueComment,\r\n                            showComment: showComment,\r\n                            showReply: showReply,\r\n                            valueReply: valueReply,\r\n                            submittingReply: submittingReply,\r\n                            pageComment: pageComment,\r\n                            isLastComment: isLastComment\r\n                        })\r\n                    }\r\n                }\r\n                else if (this.state.page !== response.page) {\r\n                    if (this._isMounted) {\r\n                        //console.log(\"setState2\")\r\n                        this.setState({\r\n                            posts: posts.concat(response.content),\r\n                            page: response.page,\r\n                            size: response.size,\r\n                            totalElements: response.totalElements,\r\n                            totalPages: response.totalPages,\r\n                            last: response.last,\r\n                            currentVotes: currentVotes2,\r\n                            isLoading: false,\r\n                            check: 0,\r\n                            comments: comments,\r\n                            submittingComment: submittingComment,\r\n                            valueComment: valueComment,\r\n                            showComment: showComment,\r\n                            showReply: showReply,\r\n                            valueReply: valueReply,\r\n                            submittingReply: submittingReply,\r\n                            pageComment: pageComment\r\n                        })\r\n                    }\r\n                }\r\n\r\n\r\n\r\n            }).catch(error => {\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        isLoading: false\r\n                    })\r\n                }\r\n            });\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n        if (this.state.stompClient != null) {\r\n            //console.log(\"disccccccccccccccccccccccco\")\r\n            this.state.stompClient.send('/app/stop', {});\r\n            this.state.stompClient.disconnect();\r\n        }\r\n        //console.log(\"unmount\")\r\n    }\r\n    socketPoll = (data) => {\r\n        const posts = this.state.posts.slice();\r\n\r\n        switch (data.type) {\r\n            case 1://Vote + delete vote\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        post.polls.some((poll, pollIndex) => {\r\n                            if (poll.id === data.pollId) {\r\n                                posts[postIndex].polls[pollIndex].totalVotes = data.totalVotes;\r\n                                data.choices.forEach((choiceSocket) => {\r\n                                    poll.choices.some((choice, choiceIndex) => {\r\n                                        if (choice.id === choiceSocket.id) {\r\n                                            choiceSocket.userVoteCount = choice.userVoteCount;\r\n                                            posts[postIndex].polls[pollIndex].choices[choiceIndex] = {\r\n                                                ...posts[postIndex].polls[pollIndex].choices[choiceIndex],\r\n                                                ...choiceSocket\r\n                                            }\r\n                                        }\r\n                                        return choice.id === choiceSocket.id;\r\n                                    })\r\n                                })\r\n                            }\r\n                            return poll.id === data.pollId;\r\n                        })\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                \r\n                break;\r\n            case 2://end poll\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        post.polls.some((poll, pollIndex) => {\r\n                            if (poll.id === data.pollId) {\r\n                                posts[postIndex].polls[pollIndex].isExpired = data.isExpired;\r\n                                posts[postIndex].polls[pollIndex].expirationDateTime = data.expirationDateTime;\r\n                            }\r\n                            return poll.id === data.pollId;\r\n                        })\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                break;\r\n            case 3://add choice\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        post.polls.some((poll, pollIndex) => {\r\n                            if (poll.id === data.pollId) {\r\n                                posts[postIndex].polls[pollIndex].choices = posts[postIndex].polls[pollIndex].choices.concat(data.choices[0]);\r\n                            }\r\n                            return poll.id === data.pollId;\r\n                        })\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                break;\r\n            case 4: //delete choice\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        post.polls.some((poll, pollIndex) => {\r\n                            if (poll.id === data.pollId) {\r\n                                poll.choices.some((choice, choiceIndex) => {\r\n                                    if (choice.id === data.choiceId) {\r\n                                        posts[postIndex].polls[pollIndex].totalVotes = posts[postIndex].polls[pollIndex].totalVotes - posts[postIndex].polls[pollIndex].choices[choiceIndex].voteCount;\r\n                                        posts[postIndex].polls[pollIndex].choices.splice(choiceIndex, 1);\r\n                                    }\r\n                                    return choice.id === data.choiceId;\r\n                                })\r\n                            }\r\n                            return poll.id === data.pollId;\r\n                        })\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                break;\r\n            case 5: //Like post\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        posts[postIndex].totalLike++;\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                break;\r\n            case 6: //UnLike post\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        posts[postIndex].totalLike--;\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                break;\r\n            case 7: //Comment post\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        posts[postIndex].totalComment++;\r\n                        if (this.state.showComment[postIndex]) {\r\n                            const comments = this.state.comments.slice();\r\n                            comments[postIndex] = comments[postIndex].concat(data.comment);\r\n                            this.setState({\r\n                                comments: comments\r\n                            })\r\n                        }\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                break;\r\n            case 8: //Reply post\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        //posts[postIndex].totalComment++;\r\n                        if (this.state.showComment[postIndex]) {\r\n                            const comments = this.state.comments.slice();\r\n                            comments[postIndex].some((comment, commentIndex) => {\r\n                                if (comment.id === data.reply.commentId) {\r\n                                    comments[postIndex][commentIndex].replys = comments[postIndex][commentIndex].replys.concat(data.reply);\r\n                                    this.setState({\r\n                                        comments: comments\r\n                                    })\r\n                                }\r\n                                return comment.id === data.reply.commentId;\r\n                            })\r\n                            //    comments[postIndex] = comments[postIndex].concat(data.comment); \r\n                            //    this.setState({\r\n                            //         comments : comments\r\n                            //     })\r\n                        }\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                break;\r\n            case 9:\r\n                posts.some((post, postIndex) => {\r\n                    if (post.id === data.postId) {\r\n                        posts[postIndex].question = data.name;\r\n                    }\r\n                    return post.id === data.postId;\r\n                })\r\n                break;\r\n            case 10:\r\n                notification.info({\r\n                    message: `Notification`,\r\n                    description:\r\n                      data.name,\r\n                      placement: \"bottomLeft\",\r\n                      onClick: ()=>this.props.history.push(\"/post/\"+data.postId)\r\n                  });\r\n                  break;\r\n            default:\r\n\r\n        }\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                posts: posts\r\n            })\r\n        }\r\n    }\r\n    onFollowPost = (postIndex) => {\r\n        const post = this.state.posts;\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to follow.\",\r\n            });\r\n            return;\r\n        }\r\n        savePost(post[postIndex].id)\r\n            .then(response => {\r\n                post[postIndex].isUserStorage = true;\r\n                this.setState({\r\n                    posts: post\r\n                })\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: response.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    deleteFollowPost = (postIndex) => {\r\n        const post = this.state.posts;\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to follow.\",\r\n            });\r\n            return;\r\n        }\r\n        deleteSavePost(post[postIndex].id)\r\n            .then(response => {\r\n                post[postIndex].isUserStorage = false;\r\n                this.setState({\r\n                    posts: post\r\n                })\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: response.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    onLikePost = (postIndex) => {\r\n        const post = this.state.posts[postIndex];\r\n        // if (this.props.isAuthenticated) {\r\n        //     this.state.stompClient.send('/app/start', {}, post.id);\r\n        // }\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to like.\",\r\n            });\r\n            return;\r\n        }\r\n        castLike(post.id)\r\n            .then(response => {\r\n                const posts = this.state.posts.slice();\r\n                posts[postIndex] = response;\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        posts: posts\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    showModalDeletePost = (postIndex) => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visiblePost: true,\r\n                currentPostIndex: postIndex\r\n            })\r\n        }\r\n    }\r\n    handleDeletePostSubmit = () => {\r\n        const post = this.state.posts[this.state.currentPostIndex];\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to delete.\",\r\n            });\r\n            return;\r\n        }\r\n        deletePost(post.id)\r\n            .then(response => {\r\n                const posts = this.state.posts.slice();\r\n                posts.splice(this.state.currentPostIndex, 1);\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        posts: posts\r\n                    });\r\n                }\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: response.message || 'Successfully!!'\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visiblePost: false\r\n            });\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        // console.log(\"didmount\")\r\n        // console.log(this.props.taolao!==true);\r\n        this._isMounted = true;\r\n        if (this.props.isAuthenticated&&this.state.stompClient==null) {\r\n            if(this.props.socket!==true){\r\n                const socket = new SockJS(API_BASE_URL + '/ws');\r\n                const stompClient = Stomp.over(socket);\r\n                const headers = { Authorization: 'Bearer ' + localStorage.getItem(ACCESS_TOKEN) };\r\n                stompClient.connect(headers, () => {\r\n                    stompClient.subscribe(\r\n                        '/user/queue/item', (response) => this.socketPoll(JSON.parse(response.body)), headers,\r\n                    );\r\n                });\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        stompClient: stompClient\r\n                    })\r\n                }\r\n            }\r\n        }\r\n        this.loadPostList(this.state.page);\r\n\r\n        // else {\r\n        //     if(this.state.stompClient!=null){\r\n        //         console.log(\"disccccccccccccccccccccccco\")\r\n        //         this.state.stompClient.disconnect();\r\n        //     }\r\n        // }\r\n\r\n        //return ()=> stompClient && stompClient.disconnect();\r\n        // var options = {\r\n        //     root: null,\r\n        //     rootMargin: \"0px\",\r\n        //     threshold: 0.75\r\n        // };\r\n\r\n        // this.observer = new IntersectionObserver(\r\n        //     this.handleObserver.bind(this),\r\n        //     options\r\n        // );\r\n        // this.observer.observe(this.loadingRef);\r\n    }\r\n    // handleObserver = (entities, observer) => {\r\n    //     const y = entities[0].boundingClientRect.y;\r\n    //     console.log(y);\r\n    //     console.log(this.state.prevY);\r\n    //     if (this.state.prevY > y) {\r\n    //         this.loadPostList(this.state.page + 1);\r\n    //     } if (this._isMounted) {\r\n    //         this.setState({ prevY: y });\r\n    //     }\r\n    // }\r\n    componentDidUpdate(nextProps) {\r\n        //console.log(\"didupdate\")\r\n        if (this.props.isAuthenticated !== nextProps.isAuthenticated || this.props.match.params.code !== nextProps.match.params.code) {\r\n            // Reset State \r\n            //console.log(\"next\")\r\n            // if (this._isMounted) {\r\n            this.setState({\r\n                posts: [],\r\n                page: 0,\r\n                size: 10,\r\n                totalElements: 0,\r\n                totalPages: 0,\r\n                last: false,\r\n                currentVotes: [],\r\n                isLoading: false,\r\n                visible: false,\r\n                currentPollIndex: 0,\r\n                currentPostIndex: 0,\r\n                currentValue: '',\r\n                prevY: 0,\r\n                visibleListVoted: false,\r\n                votedUsers: [],\r\n                pageVoted: 0,\r\n                currentChoiceId: 0,\r\n                isLoading2: false,\r\n                last2: false,\r\n                check: 0,\r\n                visiblePost: false\r\n            });\r\n            // if (this.state.stompClient != null) {\r\n            //     //console.log(\"disccccccccccccccccccccccco\")\r\n            //     this.state.stompClient.send('/app/stop', {});\r\n            //     this.state.stompClient.disconnect();\r\n            // }\r\n            this.loadPostList();\r\n            // }\r\n\r\n        }\r\n    }\r\n\r\n    handleLoadMore = (page) => {\r\n        //console.log(page);\r\n        //console.log(this.state.isLoading)\r\n        this.loadPostList(page);\r\n    }\r\n    handleLoadMoreUserVoted = () => {\r\n        this.loadListVoted(this.state.currentChoiceId, this.state.pageVoted + 1)\r\n    }\r\n    handleVoteChange(event, pollIndex, postIndex) {\r\n        const currentVotes = this.state.currentVotes.slice();\r\n        currentVotes[postIndex][pollIndex] = event.target.value;\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                currentVotes: currentVotes\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handleVoteSubmit(event, pollIndex, postIndex) {\r\n        event.preventDefault();\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to vote.\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const poll = this.state.posts[postIndex].polls[pollIndex];\r\n        const selectedChoice = this.state.currentVotes[postIndex][pollIndex];\r\n\r\n        const voteData = {\r\n            pollId: poll.id,\r\n            choiceId: selectedChoice\r\n        };\r\n\r\n        castVote(voteData)\r\n            .then(response => {\r\n                const posts = this.state.posts.slice();\r\n                posts[postIndex] = response;\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        posts: posts\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    handleCancel = () => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visible: false,\r\n                currentPollIndex: 0,\r\n                currentPostIndex: 0,\r\n                currentValue: ''\r\n            })\r\n        }\r\n    }\r\n    handleCancelComment = () => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visibleCommentDelete: false,\r\n                currentCommentIndex: 0,\r\n                currentPostIndex: 0,\r\n            })\r\n        }\r\n    }\r\n    handleCancelReply = () => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visibleReplyDelete: false,\r\n                currentCommentIndex: 0,\r\n                currentPostIndex: 0,\r\n                currentReplyIndex: 0\r\n            })\r\n        }\r\n    }\r\n    handleCancelPost = () => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visiblePost: false,\r\n                currentPostIndex: 0\r\n            })\r\n        }\r\n    }\r\n    handleCancelListVoted = () => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visibleListVoted: false,\r\n                votedUsers: [],\r\n                isLoading2: false,\r\n                last2: false\r\n            })\r\n        }\r\n    }\r\n    loadListVoted = (choiceId, page = 0, size = USER_LIST_SIZE) => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                isLoading2: true\r\n            })\r\n        }\r\n\r\n        //     if (this._isMounted) {\r\n        //         this.setState({\r\n        //             posts: posts.concat(response.content),\r\n        //             page: response.page,\r\n        //             size: response.size,\r\n        //             totalElements: response.totalElements,\r\n        //             totalPages: response.totalPages,\r\n        //             last: response.last,\r\n        //             currentVotes: currentVotes2,\r\n        //             isLoading: false\r\n        //         })\r\n        //     }\r\n        // }\r\n        getAllUserVotedChoice(choiceId, page, size)\r\n            .then(response => {\r\n                const votedUsers = this.state.votedUsers.slice();\r\n                if (this.state.last2 !== true) {\r\n                    if (this._isMounted) {\r\n                        this.setState({\r\n                            votedUsers: votedUsers.concat(response.content),\r\n                            currentChoiceId: choiceId,\r\n                            pageVoted: page,\r\n                            last2: response.last,\r\n                            isLoading2: false\r\n                        });\r\n                    }\r\n                }\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        isLoading2: false\r\n                    })\r\n                }\r\n            });\r\n    }\r\n    showModalListVoted = (choiceId, page = 0, size = USER_LIST_SIZE) => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visibleListVoted: true\r\n            })\r\n        }\r\n        this.loadListVoted(choiceId, page, size);\r\n    }\r\n\r\n    showModal = (event, postIndex, pollIndex) => {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visible: true,\r\n                currentPollIndex: pollIndex,\r\n                currentPostIndex: postIndex,\r\n                currentValue: event.currentTarget.value\r\n            })\r\n        }\r\n    }\r\n    showModalComment = ( postIndex, commentIndex) => {\r\n        console.log(commentIndex);\r\n        console.log(postIndex);\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visibleCommentDelete: true,\r\n                currentPostIndex: postIndex,\r\n                currentCommentIndex: commentIndex\r\n            })\r\n        }\r\n    }\r\n    showModalReply = ( postIndex, commentIndex , replyIndex) => {\r\n        console.log(commentIndex);\r\n        console.log(postIndex);\r\n        console.log(replyIndex);\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visibleReplyDelete: true,\r\n                currentPostIndex: postIndex,\r\n                currentCommentIndex: commentIndex,\r\n                currentReplyIndex: replyIndex\r\n            })\r\n        }\r\n    }\r\n    handleDeleteVoteSubmit = (event, postIndex, pollIndex) => {\r\n        event.preventDefault();\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to delete.\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const poll = this.state.posts[postIndex].polls[pollIndex];\r\n        const selectedChoice = event.currentTarget.value;\r\n\r\n        const voteData = {\r\n            choiceId: selectedChoice\r\n        };\r\n\r\n        deleteVote(poll.id, voteData)\r\n            .then(response => {\r\n                const posts = this.state.posts.slice();\r\n                posts[postIndex] = response;\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        posts: posts\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    onEndPoll = (event, postIndex, pollIndex) => {\r\n        event.preventDefault();\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to update.\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const poll = this.state.posts[postIndex].polls[pollIndex];\r\n\r\n        endPoll(poll.id)\r\n            .then(response => {\r\n                const posts = this.state.posts.slice();\r\n                posts[postIndex] = response;\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        posts: posts\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n    handleDeleteChoiceSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to delete.\",\r\n            });\r\n            return;\r\n        }\r\n\r\n        const poll = this.state.posts[this.state.currentPostIndex].polls[this.state.currentPollIndex];\r\n\r\n        const voteData = {\r\n            choiceId: this.state.currentValue\r\n        };\r\n\r\n        deleteChoice(poll.id, voteData)\r\n            .then(response => {\r\n                const posts = this.state.posts.slice();\r\n                posts[this.state.currentPostIndex] = response;\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        posts: posts\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visible: false\r\n            });\r\n        }\r\n    }\r\n    \r\n    handleDeleteCommentSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to delete.\",\r\n            });\r\n            return;\r\n        }\r\n        const postIndex = this.state.currentPostIndex;\r\n        const commentIndex = this.state.currentCommentIndex;\r\n        const comment = this.state.comments.slice();\r\n        const posts = this.state.posts.slice();\r\n        deleteComment(posts[postIndex].id,comment[postIndex][commentIndex].id)\r\n            .then(response => {\r\n                posts[postIndex].totalComment--;\r\n                comment[postIndex].splice(commentIndex,1);\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        posts: posts,\r\n                        comments: comment\r\n                    });\r\n                }\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: response.message || 'Delete comment success!'\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visibleCommentDelete: false\r\n            });\r\n        }\r\n    }\r\n    handleDeleteReplySubmit = (event) => {\r\n        event.preventDefault();\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to delete.\",\r\n            });\r\n            return;\r\n        }\r\n        const postIndex = this.state.currentPostIndex;\r\n        const commentIndex = this.state.currentCommentIndex;\r\n        const replyIndex = this.state.currentReplyIndex;\r\n        const comment = this.state.comments.slice();\r\n        const posts = this.state.posts.slice();\r\n        deleteReply(posts[postIndex].id,comment[postIndex][commentIndex].id,comment[postIndex][commentIndex].replys[replyIndex].id)\r\n            .then(response => {\r\n                comment[postIndex][commentIndex].replys.splice(replyIndex,1);\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        comments: comment\r\n                    });\r\n                }\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: response.message || 'Delete comment success!'\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                visibleReplyDelete: false\r\n            });\r\n        }\r\n    }\r\n    updateName = (value, index) => {\r\n        const posts = this.state.posts;\r\n        if (!this.props.isAuthenticated) {\r\n            this.props.history.push(\"/login\");\r\n            notification.info({\r\n                message: 'Polling App',\r\n                description: \"Please login to update.\",\r\n            });\r\n            return;\r\n        }\r\n        updatePostName(posts[index].id, value)\r\n            .then(response => {\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: \"Thank you! You're successfully update post name!\",\r\n                });\r\n                posts[index].question = value;\r\n                this.setState({\r\n                    posts: posts\r\n                })\r\n                this.props.history.push(\"/post/\" + posts[index].id);\r\n            }).catch(error => {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            });\r\n\r\n\r\n    }\r\n    render() {\r\n        const style = {\r\n            height: 40,\r\n            width: 40,\r\n            lineHeight: '40px',\r\n            borderRadius: 4,\r\n            backgroundColor: '#fff',\r\n            color: 'rgb(0 0 0)',\r\n            textAlign: 'center',\r\n            fontSize: 14,\r\n            boxShadow: '0 2px 2px 0 rgb(0 0 0 / 16%), 0 0 0 1px rgb(0 0 0 / 8%)',\r\n        };\r\n        const postViews = [];\r\n        this.state.posts.forEach((post, postIndex) => {\r\n            postViews.push(<Post\r\n                // onChangeNamePost = {this.onChangeNamePost}\r\n                onLoadMoreComment = {this.onLoadMoreComment}\r\n                onDeleteReply = {this.showModalReply}\r\n                onDeleteComment = {this.showModalComment}\r\n                showComment={this.state.showComment[postIndex]}\r\n                comments={this.state.comments[postIndex]}\r\n                pageComment={this.state.pageComment[postIndex]}\r\n                isLastComment={this.state.isLastComment[postIndex]}\r\n                submittingComment={this.state.submittingComment[postIndex]}\r\n                valueComment={this.state.valueComment[postIndex]}\r\n                showReply={this.state.showReply[postIndex]}\r\n                valueReply={this.state.valueReply[postIndex]}\r\n                submittingReply={this.state.submittingReply[postIndex]}\r\n                handleChangeComment={this.handleChangeComment}\r\n                handleSubmitComment={this.handleSubmitComment}\r\n                onComment={this.onComment}\r\n                onReply={this.onReply}\r\n                handleChangeReply={this.handleChangeReply}\r\n                handleSubmitReply={this.handleSubmitReply}\r\n                updateName={this.updateName}\r\n                onFollowPost={this.onFollowPost}\r\n                deleteFollowPost={this.deleteFollowPost}\r\n                onDeletePost={this.showModalDeletePost}\r\n                onLikePost={this.onLikePost}\r\n                currentUser={this.props.currentUser}\r\n                key={post.id}\r\n                post={post}\r\n                currentVote={this.state.currentVotes[postIndex]}\r\n                postIndex={postIndex}\r\n                addAChoice={this.addAChoice}\r\n                handleDeleteChoiceSubmit={this.showModal}\r\n                handleShowListVoted={this.showModalListVoted}\r\n                handleDeleteVoteSubmit={this.handleDeleteVoteSubmit}\r\n                onEndPoll={this.onEndPoll}\r\n                handleVoteChange={this.handleVoteChange}\r\n                handleVoteSubmit={this.handleVoteSubmit} />)\r\n        });\r\n        // const votedUsers = [];\r\n        // this.state.votedUsers.forEach((user, userIndex) => {\r\n        //     const title = user.name + ' @ ' + user.username;\r\n        //     const des = \"Voted :\" + user.count;\r\n        //     votedUsers.push(\r\n        // <Card >\r\n        //     <Meta\r\n        //       avatar={\r\n        //         <Avatar\r\n        //                     style={{ backgroundColor: getAvatarColor(user.name) }} >\r\n        //                     {user.name[0].toUpperCase()}\r\n        //                 </Avatar>\r\n        //       }\r\n        //       title=  {title}\r\n        //       description={des}\r\n        //     />\r\n        //   </Card>\r\n        // <div className=\"poll-creator-info\">\r\n        //     <Link className=\"creator-link\" to={`/users/${user.username}`}>\r\n        //         <Avatar className=\"poll-creator-avatar\"\r\n        //             style={{ backgroundColor: getAvatarColor(user.name) }} >\r\n        //             {user.name[0].toUpperCase()}\r\n        //         </Avatar>\r\n        //         <span className=\"poll-creator-name\">\r\n        //             {user.name}\r\n        //         </span>\r\n        //         <span className=\"poll-creator-username\">\r\n        //             @{user.username}\r\n        //         </span>\r\n        //     </Link>\r\n        //     <span className=\"poll-creation-date\">\r\n        //         Voted: {user.count}\r\n        //     </span>\r\n        // </div>\r\n\r\n        //     )\r\n        // })\r\n        // votedUsers.push(<div>\r\n        //     {\r\n        //         !this.state.isLoadingVoted && !this.state.lastVoted ? (\r\n        //             <div className=\"load-more-polls\">\r\n        //                 <Button type=\"dashed\" onClick={this.handleLoadUserVotedMore} disabled={this.state.isLoadingVoted}>\r\n        //                     <Icon type=\"plus\" /> Load more\r\n        //                 </Button>\r\n        //             </div>) : null\r\n        //     }</div>\r\n        // )\r\n        return (\r\n            <div className=\"polls-container\">\r\n                <Modal\r\n                    title=\"Confirm your action\"\r\n                    visible={this.state.visible}\r\n                    onOk={this.handleDeleteChoiceSubmit}\r\n                    onCancel={this.handleCancel}\r\n                    footer={[\r\n                        <Button key=\"back\" onClick={this.handleCancel}>\r\n                            Return\r\n                        </Button>,\r\n                        <Button key=\"submit\" type=\"primary\" onClick={this.handleDeleteChoiceSubmit}>\r\n                            Submit\r\n                        </Button>,\r\n                    ]}\r\n                ><p>Are you want delete this choice?</p>\r\n                </Modal>\r\n                <Modal\r\n                    title=\"Confirm your action\"\r\n                    visible={this.state.visibleReplyDelete}\r\n                    onOk={this.handleDeleteReplySubmit}\r\n                    onCancel={this.handleCancelReply}\r\n                    footer={[\r\n                        <Button key=\"back\" onClick={this.handleCancelReply}>\r\n                            Return\r\n                        </Button>,\r\n                        <Button key=\"submit\" type=\"primary\" onClick={this.handleDeleteReplySubmit}>\r\n                            Submit\r\n                        </Button>,\r\n                    ]}\r\n                ><p>Are you want delete this reply?</p>\r\n                </Modal>\r\n                <Modal\r\n                    title=\"Confirm your action\"\r\n                    visible={this.state.visiblePost}\r\n                    onOk={this.handleDeletePostSubmit}\r\n                    onCancel={this.handleCancelPost}\r\n                    footer={[\r\n                        <Button key=\"back\" onClick={this.handleCancelPost}>\r\n                            Return\r\n                        </Button>,\r\n                        <Button key=\"submit\" type=\"primary\" onClick={this.handleDeletePostSubmit}>\r\n                            Submit\r\n                        </Button>,\r\n                    ]}\r\n                ><p>Are you want delete this post?</p>\r\n                </Modal>\r\n                <Modal\r\n                    title=\"Confirm your action\"\r\n                    visible={this.state.visibleCommentDelete}\r\n                    onOk={this.handleDeleteCommentSubmit}\r\n                    onCancel={this.handleCancelComment}\r\n                    footer={[\r\n                        <Button key=\"back\" onClick={this.handleCancelComment}>\r\n                            Return\r\n                        </Button>,\r\n                        <Button key=\"submit\" type=\"primary\" onClick={this.handleDeleteCommentSubmit}>\r\n                            Submit\r\n                        </Button>,\r\n                    ]}\r\n                ><p>Are you want delete this comment?</p>\r\n                </Modal>\r\n                <Modal\r\n                    title=\"List User Voted This Choice\"\r\n                    centered\r\n                    visible={this.state.visibleListVoted}\r\n                    onCancel={this.handleCancelListVoted}\r\n\r\n                    footer={[\r\n                        <Button key=\"back\" onClick={this.handleCancelListVoted}>\r\n                            Return\r\n                        </Button>,\r\n                    ]}\r\n                >\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={this.state.votedUsers}\r\n                        renderItem={item => (\r\n                            <List.Item>\r\n                                <List.Item.Meta\r\n                                    avatar={item.photo == null ?\r\n                                        <Avatar className=\"poll-creator-avatar2\"\r\n                                            style={{ backgroundColor: getAvatarColor(item.name) }} >\r\n                                            {item.name[0].toUpperCase()}\r\n                                        </Avatar> : <Avatar className=\"poll-creator-avatar2\"\r\n                                            //src={API_BASE_URL + \"/file/getImage/\" + item.photo} \r\n                                            src={\"https://drive.google.com/uc?export=view&id=\"+item.photo}\r\n                                            >\r\n                                        </Avatar>\r\n                                    }\r\n                                    title={<div>{item.name} <span style={{ color: '#657786' }}>@{item.username}</span></div>}\r\n                                    description={<span>Voted: {item.count}</span>}\r\n                                />\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                    {\r\n                        !this.state.isLoading2 && !this.state.last2 ? (\r\n                            <div className=\"load-more-polls\">\r\n                                <Button type=\"dashed\" onClick={this.handleLoadMoreUserVoted} disabled={this.state.isLoading2}>\r\n                                    <PlusOutlined /> Load more\r\n                                </Button>\r\n                            </div>) : null\r\n                    }\r\n                    {\r\n                        this.state.isLoading2 ?\r\n                            <LoadingIndicator /> : null\r\n                    }\r\n                </Modal>\r\n                <InfiniteScroll\r\n                    initialLoad={false}\r\n                    pageStart={this.state.page}\r\n                    loadMore={this.handleLoadMore}\r\n                    hasMore={!this.state.isLoading && !this.state.last}\r\n                    // hasMore={true}\r\n                    threshold={1500}\r\n                    useWindow={true}\r\n                >\r\n                    {postViews}\r\n                    {this.state.isloading && (\r\n                        <div className=\"demo-loading-container\">\r\n                            <LoadingIndicator />\r\n                        </div>\r\n                    )}\r\n                </InfiniteScroll>\r\n                {/* <InfiniteScroll\r\n                    initialLoad={false}\r\n                    pageStart={0}\r\n                    loadMore={this.handleLoadMore}\r\n                    hasMore={!this.state.isloading}\r\n                    loader={<div className=\"loader\" key={0}>Loading ...</div>}\r\n                    // hasMore={true}\r\n                    useWindow={true}\r\n                >\r\n                    {postViews}\r\n                    {this.state.isloading &&  (\r\n                        <div className=\"demo-loading-container\">\r\n                            <LoadingIndicator />\r\n                        </div>\r\n                    )}\r\n                </InfiniteScroll> */}\r\n                {/* {\r\n                    !this.state.isLoading && this.state.posts.length === 0 ? (\r\n                        <div className=\"no-polls-found\">\r\n                            <span>No Polls Found.</span>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n\r\n                <div\r\n                    ref={(loadingRef) => (this.loadingRef = loadingRef)}\r\n\r\n                >\r\n                    {\r\n                        !this.state.isLoading && !this.state.last ? (\r\n                            <div className=\"load-more-polls\">\r\n                                <Button type=\"dashed\" onClick={this.handleLoadMore} disabled={this.state.isLoading}>\r\n                                    <PlusOutlined /> Load more\r\n                                </Button>\r\n                            </div>) : null\r\n                    }\r\n                </div>\r\n                {\r\n                    this.state.isLoading ?\r\n                        <LoadingIndicator /> : null\r\n                } */}\r\n                <BackTop>\r\n                    <div style={style}><VerticalAlignTopOutlined /></div>\r\n                </BackTop>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(PostList);","import React, { Component } from 'react';\r\nimport { createPoll, getListUser, getListGroup,deleteImage } from '../util/APIUtils';\r\nimport { MAX_CHOICES, POLL_QUESTION_MAX_LENGTH, POLL_CHOICE_MAX_LENGTH,USER_MAX_LENGTH,GROUP_MAX_LENGTH } from '../constants';\r\nimport './NewPost.css';\r\nimport { Avatar, Form, Input, Button, Select, Col, notification, Switch, InputNumber, Row } from 'antd';\r\nimport { Mentions, Upload } from 'antd';\r\nimport {\r\n    CloseOutlined, UploadOutlined,PlusOutlined\r\n} from '@ant-design/icons';\r\nimport { API_BASE_URL,  ACCESS_TOKEN } from '../constants';\r\nimport moment from 'moment';\r\nimport { DatePicker, Space } from 'antd';\r\nimport { getAvatarColor } from '../util/Colors';\r\nconst Option = Select.Option;\r\nconst { getMentions } = Mentions;\r\nconst FormItem = Form.Item;\r\nconst { TextArea } = Input\r\n\r\nclass NewPoll extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n            question: {\r\n                text: ''\r\n            },\r\n            polls: [{\r\n                question: {\r\n                    text: ''\r\n                },\r\n                choices: [{\r\n                    text: '',\r\n                    photo: null,\r\n                    review: null\r\n                }, {\r\n                    text: '',\r\n                    photo: null,\r\n                    review: null\r\n                }],\r\n                pollLength: {\r\n                    days: 1,\r\n                    hours: 0\r\n                },\r\n                photo: '',\r\n                isUnseenUserForVote: false,\r\n                isUnseenUserForAddChoice: false,\r\n                isAddChoice: false,\r\n                isCanFix: true,\r\n                showResultCase: 1,\r\n                maxVotePerTimeLoad: 1,\r\n                maxVotePerChoice: 1,\r\n                maxVoteOfPoll: 1,\r\n                timeLoad: {\r\n                    days: 0,\r\n                    hours: 0\r\n                },\r\n                isHasPollLength: true\r\n            }],\r\n            isUnseenOwner: false,\r\n            showCase: 3,\r\n            publicDateMoment: '',\r\n            publicDate: '',\r\n            isDelay: false,\r\n            users: [],\r\n            groups: [],\r\n            usersSend: [],\r\n            groupsSend: [],\r\n            search: '',\r\n            loading: false\r\n        };\r\n        // this.addChoice = this.addChoice.bind(this);\r\n        // this.addPoll = this.addPoll.bind(this);\r\n        // this.removeChoice = this.removeChoice.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        // this.handleQuestionChange = this.handleQuestionChange.bind(this);\r\n        // this.handleChoiceChange = this.handleChoiceChange.bind(this);\r\n        // this.handlePollDaysChange = this.handlePollDaysChange.bind(this);\r\n        // this.handlePollHoursChange = this.handlePollHoursChange.bind(this);\r\n        // this.handleTimeLoadDaysChange = this.handleTimeLoadDaysChange.bind(this);\r\n        // this.handleTimeLoadHoursChange = this.handleTimeLoadHoursChange.bind(this);\r\n        // this.handleQuestionForPostChange = this.handleQuestionForPostChange.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n        // this.handleShowResultCaseChange = this.handleShowResultCaseChange.bind(this);\r\n        // this.handleShowCaseChange = this.handleShowCaseChange.bind(this);\r\n        // this.loadUserList = this.loadUserList.bind(this);\r\n        this.handlePublicDateChange = this.handlePublicDateChange.bind(this);\r\n        // this.onSelect = this.onSelect.bind(this);\r\n        // this.onSelectGroup = this.onSelectGroup.bind(this);\r\n        // this.loadGroupList = this.loadGroupList.bind(this);\r\n    }\r\n\r\n    handlePublicDateChange(dateString) {\r\n        //console.log(dateString.format(\"DD-MM-YYYY HH:mm:ss\"));\r\n        this.setState({\r\n            publicDateMoment: dateString\r\n        })\r\n    }\r\n    range = (start, end) => {\r\n        const result = [];\r\n        for (let i = start; i < end; i++) {\r\n            result.push(i);\r\n        }\r\n        return result;\r\n    }\r\n    disabledDate = (current) => {\r\n        // Can not select days before today and today\r\n        return current < moment().endOf('day');\r\n    }\r\n    disabledDateTime = () => {\r\n        // if(current.get('day')===moment().get('day')){\r\n\r\n\r\n        // return {\r\n        //     disabledHours: () => this.range(0, 4),\r\n        //     disabledMinutes: () => this.range(30, 60),\r\n        //     disabledSeconds: () => [55, 56],\r\n        // };}\r\n        // else {\r\n        return {\r\n            disabledHours: () => this.range(0, 0),\r\n            disabledMinutes: () => this.range(0, 0),\r\n            disabledSeconds: () => this.range(0, 0),\r\n        };\r\n        //}\r\n    }\r\n    addChoice = (event, indexPoll)=> {\r\n        const polls = this.state.polls.slice();\r\n        const choices = polls[indexPoll].choices.slice();\r\n        polls[indexPoll].choices = choices.concat([{\r\n            text: '',\r\n            photo: null,\r\n            review: null\r\n        }])\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    addPoll = (event)=> {\r\n        const polls = this.state.polls.slice();\r\n\r\n        this.setState({\r\n            polls: polls.concat([{\r\n                question: {\r\n                    text: ''\r\n                },\r\n                choices: [{\r\n                    text: '',\r\n                    photo: null,\r\n                    review: null\r\n                }, {\r\n                    text: '',\r\n                    photo: null,\r\n                    review: null\r\n                }],\r\n                pollLength: {\r\n                    days: 1,\r\n                    hours: 0\r\n                },\r\n                photo: '',\r\n                isUnseenUserForVote: false,\r\n                isUnseenUserForAddChoice: false,\r\n                isAddChoice: false,\r\n                isCanFix: true,\r\n                showResultCase: 1,\r\n                maxVotePerTimeLoad: 1,\r\n                maxVotePerChoice: 1,\r\n                maxVoteOfPoll: 1,\r\n                timeLoad: {\r\n                    days: 0,\r\n                    hours: 0\r\n                },\r\n                isHasPollLength: true\r\n            }])\r\n        });\r\n    }\r\n    removeChoice=(choiceNumber, pollNumber)=> {\r\n        const polls = this.state.polls.slice();\r\n        const choices = polls[pollNumber].choices.slice();\r\n        //choices = [...choices.slice(0, choiceNumber), ...choices.slice(choiceNumber + 1)]\r\n        polls[pollNumber].choices = [...choices.slice(0, choiceNumber), ...choices.slice(choiceNumber + 1)];\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    removePoll=(pollNumber)=> {\r\n        const polls = this.state.polls.slice();\r\n        //choices = [...choices.slice(0, choiceNumber), ...choices.slice(choiceNumber + 1)]\r\n        this.setState({\r\n            polls:  [...polls.slice(0, pollNumber), ...polls.slice(pollNumber + 1)]\r\n        });\r\n    }\r\n    onSearch = search => {\r\n        this.setState({ search, loading: !!search });\r\n        //console.log('Search:', search);\r\n        this.loadUserList(search);\r\n    }\r\n    onSearchGroup = search => {\r\n        this.setState({ search, loading: !!search });\r\n        //console.log('Search:', search);\r\n        this.loadGroupList(search);\r\n    }\r\n    loadUserList = (key) => {\r\n        let promise;\r\n        promise = getListUser(key, \"username\");\r\n\r\n        if (!promise) {\r\n            return;\r\n        }\r\n        promise\r\n            .then(response => {\r\n                let users = response.filter((user) => {\r\n                    var check = true;\r\n                    this.state.usersSend.forEach((userSend) => {\r\n                        if (user.username === userSend) {\r\n                            check = false;\r\n                        }\r\n                    })\r\n                    return check;\r\n                })\r\n                this.setState({\r\n                    users: users,\r\n                    loading: false,\r\n                })\r\n\r\n\r\n\r\n            }).catch(error => {\r\n                // this.setState({\r\n                //     users: response\r\n                // })\r\n            });\r\n\r\n    }\r\n    loadGroupList = (key) => {\r\n        let promise;\r\n        promise = getListGroup(key);\r\n\r\n        if (!promise) {\r\n            return;\r\n        }\r\n        promise\r\n            .then(response => {\r\n                let groups = response.filter((group) => {\r\n                    var check = true;\r\n                    this.state.groupsSend.forEach((groupSend) => {\r\n                        if (group.code === groupSend) {\r\n                            check = false;\r\n                        }\r\n                    })\r\n                    return check;\r\n                })\r\n                this.setState({\r\n                    groups: groups,\r\n                    loading: false,\r\n                })\r\n\r\n\r\n\r\n            }).catch(error => {\r\n                // this.setState({\r\n                //     users: response\r\n                // })\r\n            });\r\n\r\n    }\r\n    handleSubmit() {\r\n        const pollData = {\r\n            question: this.state.question.text,\r\n            polls: this.state.polls.map(poll => {\r\n                if(poll.isHasPollLength){\r\n                    return {\r\n                        question: poll.question.text,\r\n                        choices: poll.choices.map(choice => {\r\n                            return {\r\n                                text: choice.text,\r\n                                photo: choice.photo,\r\n                                review: choice.review\r\n                            }\r\n                        }),\r\n                        photo: poll.photo,\r\n                        pollLength: poll.pollLength,\r\n                        isUnseenUserForVote: poll.isUnseenUserForVote,\r\n                        isUnseenUserForAddChoice: poll.isUnseenUserForAddChoice,\r\n                        isAddChoice: poll.isAddChoice,\r\n                        isCanFix: poll.isCanFix,\r\n                        showResultCase: poll.showResultCase,\r\n                        maxVotePerTimeLoad: poll.maxVotePerTimeLoad,\r\n                        maxVotePerChoice: poll.maxVotePerChoice,\r\n                        maxVoteOfPoll: poll.maxVoteOfPoll,\r\n                        timeLoad: poll.timeLoad\r\n                    }\r\n                }\r\n                else{\r\n                    return {\r\n                        question: poll.question.text,\r\n                        choices: poll.choices.map(choice => {\r\n                            return {\r\n                                text: choice.text,\r\n                                photo: choice.photo,\r\n                                review: choice.review\r\n                            }\r\n                        }),\r\n                        photo: poll.photo,\r\n                        isUnseenUserForVote: poll.isUnseenUserForVote,\r\n                        isUnseenUserForAddChoice: poll.isUnseenUserForAddChoice,\r\n                        isAddChoice: poll.isAddChoice,\r\n                        isCanFix: poll.isCanFix,\r\n                        showResultCase: poll.showResultCase,\r\n                        maxVotePerTimeLoad: poll.maxVotePerTimeLoad,\r\n                        maxVotePerChoice: poll.maxVotePerChoice,\r\n                        maxVoteOfPoll: poll.maxVoteOfPoll,\r\n                        timeLoad: poll.timeLoad\r\n                    }\r\n                }\r\n            })\r\n            ,\r\n            isUnseenOwner: this.state.isUnseenOwner,\r\n            showCase: this.state.showCase,\r\n            publicDate: null,\r\n            usersUsername: this.state.usersSend,\r\n            groups: this.state.groupsSend\r\n        };\r\n        if (this.state.isDelay) {\r\n            if (this.state.publicDateMoment !== '') {\r\n                pollData.publicDate = this.state.publicDateMoment.format(\"DD-MM-YYYY HH:mm:ss\")\r\n            }\r\n\r\n        }\r\n        //console.log(pollData);\r\n        createPoll(pollData)\r\n            .then(response => {\r\n                this.props.history.push(\"/\");\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login create poll.');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n    validateQuestion = (questionText) => {\r\n        if (questionText.length === 0) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Please enter your question!'\r\n            }\r\n        } else if (questionText.length > POLL_QUESTION_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Question is too long (Maximum ${POLL_QUESTION_MAX_LENGTH} characters allowed)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    handleQuestionChange = (event, index) => {\r\n        const value = event.target.value;\r\n        const polls = this.state.polls.slice();\r\n        const pollitem = Object.assign(this.state.polls[index], {\r\n            question: {\r\n                text: value,\r\n                ...this.validateQuestion(value)\r\n            }\r\n        });\r\n        polls[index] = pollitem\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n\r\n    validateChoice = (choiceText) => {\r\n        if (choiceText.length === 0) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Please enter a choice!'\r\n            }\r\n        } else if (choiceText.length > POLL_CHOICE_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Choice is too long (Maximum ${POLL_CHOICE_MAX_LENGTH} characters allowed)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    handleChoiceChange = (event, indexChoice, indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const value = event.target.value;\r\n        const choiceitem = Object.assign(this.state.polls[indexPoll].choices[indexChoice], {\r\n            text: value,\r\n            ...this.validateChoice(value)\r\n        });\r\n\r\n        polls[indexPoll].choices[indexChoice] = choiceitem\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n\r\n\r\n    handlePollDaysChange=(value, indexPoll)=> {\r\n        const polls = this.state.polls.slice();\r\n        const pollLength = Object.assign(polls[indexPoll].pollLength, { days: value });\r\n        polls[indexPoll].pollLength = pollLength;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n\r\n    handlePollHoursChange = (value, indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const pollLength = Object.assign(polls[indexPoll].pollLength, { hours: value });\r\n        polls[indexPoll].pollLength = pollLength;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n\r\n    handleTimeLoadDaysChange = (value, indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const timeLoad = Object.assign(polls[indexPoll].timeLoad, { days: value });\r\n        polls[indexPoll].timeLoad = timeLoad;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n\r\n    handleTimeLoadHoursChange = (value, indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const timeLoad = Object.assign(polls[indexPoll].timeLoad, { hours: value });\r\n        polls[indexPoll].timeLoad = timeLoad;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        if (this.state.question.validateStatus !== 'success') {\r\n            return true;\r\n        }\r\n        if (this.state.showCase===5&&this.state.validateStatusGroup !== 'success'){\r\n            return true;\r\n        }\r\n        if (this.state.showCase===4&&this.state.validateStatusUser !== 'success'){\r\n            return true;\r\n        }\r\n        for (let i = 0; i < this.state.polls.length; i++) {\r\n            const poll = this.state.polls[i];\r\n            if (poll.question.validateStatus !== 'success') {\r\n                return true;\r\n            }\r\n            for (let j = 0; j < poll.choices.length; j++) {\r\n                const choice = poll.choices[j];\r\n                if (choice.validateStatus !== 'success') {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    onChangeIsUnseenUserForVote = (indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const isUnseenUserForVote = polls[indexPoll].isUnseenUserForVote;\r\n        polls[indexPoll].isUnseenUserForVote = !isUnseenUserForVote;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    onChangeIsUnseenUserForAddChoice = (indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const isUnseenUserForAddChoice = polls[indexPoll].isUnseenUserForAddChoice;\r\n        polls[indexPoll].isUnseenUserForAddChoice = !isUnseenUserForAddChoice;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    onChangeIsAddChoice = (indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const isAddChoice = polls[indexPoll].isAddChoice;\r\n        polls[indexPoll].isAddChoice = !isAddChoice;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    onChangeIsCanFix = (indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const isCanFix = polls[indexPoll].isCanFix;\r\n        polls[indexPoll].isCanFix = !isCanFix;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    onChangeIsHasPollLength = (indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const isHasPollLength = polls[indexPoll].isHasPollLength;\r\n        polls[indexPoll].isHasPollLength = !isHasPollLength;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    onChangeIsUnseenOwner = () => {\r\n        this.setState({\r\n            isUnseenOwner: !this.state.isUnseenOwner\r\n        })\r\n    }\r\n    onChangeIsDelay = () => {\r\n        this.setState({\r\n            isDelay: !this.state.isDelay\r\n        })\r\n    }\r\n    handleChangemaxVoteOfPoll = (value, indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        polls[indexPoll].maxVoteOfPoll = value;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    handleChangemaxVotePerChoice = (value, indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        polls[indexPoll].maxVotePerChoice = value;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    handleChangemaxVotePerTimeLoad = (value, indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        polls[indexPoll].maxVotePerTimeLoad = value;\r\n        if (polls[indexPoll].maxVoteOfPoll < value) { polls[indexPoll].maxVoteOfPoll = value };\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    handleQuestionForPostChange = (event) =>{\r\n        const value = event.target.value;\r\n        this.setState({\r\n            question: {\r\n                text: value,\r\n                ...this.validateQuestion(value)\r\n            }\r\n        });\r\n    }\r\n    handleShowResultCaseChange = (value, indexPoll) => {\r\n        const polls = this.state.polls.slice();\r\n        const pollitem = Object.assign(polls[indexPoll], { showResultCase: value });\r\n        polls[indexPoll] = pollitem;\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    handleShowCaseChange = (value) => {\r\n        this.setState({\r\n            showCase: value\r\n        })\r\n    }\r\n    onSelect = (value)=> {\r\n        const mentions = getMentions(value);\r\n        //console.log(mentions)\r\n        const usersSend = [];\r\n        mentions.forEach((mention) => {\r\n            usersSend.push(mention.value);\r\n        })\r\n        this.setState({\r\n            usersSend: usersSend,\r\n            ...this.validateUsers(usersSend)\r\n        })\r\n        //console.log(this.state.usersSend);\r\n    }\r\n    onSelectGroup =(value)=> {\r\n        const mentions = getMentions(value);\r\n        //console.log(mentions)\r\n        const groupsSend = [];\r\n        mentions.forEach((mention) => {\r\n            groupsSend.push(mention.value)\r\n        })\r\n        this.setState({\r\n            groupsSend: groupsSend,\r\n            ...this.validateGroups(groupsSend)\r\n        })\r\n        //console.log(this.state.usersSend);\r\n    }\r\n    validateGroups = (mentions) =>{\r\n        //console.log(mentions.length)\r\n        if (mentions.length === 0) {\r\n            return {\r\n                validateStatusGroup: 'error',\r\n                errorMsgGroup: 'Please enter a group code!'\r\n            }\r\n        } else if (mentions.length > GROUP_MAX_LENGTH) {\r\n            return {\r\n                validateStatusGroup: 'error',\r\n                errorMsgGroup: `Group is too much (Maximum ${GROUP_MAX_LENGTH} group allowed)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatusGroup: 'success',\r\n                errorMsgGroup: null\r\n            }\r\n        }\r\n    }\r\n    validateUsers = (mentions) =>{\r\n        //console.log(mentions.length)\r\n        if (mentions.length === 0) {\r\n            return {\r\n                validateStatusUser: 'error',\r\n                errorMsgUser: 'Please enter a username!'\r\n            }\r\n        } else if (mentions.length > USER_MAX_LENGTH) {\r\n            return {\r\n                validateStatusUser: 'error',\r\n                errorMsgUser: `User is too much (Maximum ${USER_MAX_LENGTH} user allowed)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatusUser: 'success',\r\n                errorMsgUser: null\r\n            }\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.loadUserList(\"\");\r\n        this.loadGroupList(\"\");\r\n    }\r\n    onChangeUpload = (info, indexPoll) => {\r\n        if (info.file.status !== \"uploading\") {\r\n            //console.log(info);\r\n            //console.log(this.state.polls);\r\n\r\n        }\r\n        if (info.fileList.length === 0) {\r\n            const polls = this.state.polls.slice();\r\n            deleteImage(polls[indexPoll].photo);\r\n            polls[indexPoll].photo = null;\r\n            this.setState({\r\n                polls: polls\r\n            });\r\n        }\r\n        if (info.file.status === \"done\") {\r\n            const polls = this.state.polls.slice();\r\n            //const isAddChoice = polls[indexPoll].isAddChoice;\r\n\r\n            //polls[indexPoll].photo = info.fileList[0].response.fileDownloadUri;\r\n            console.log(info.fileList[0].response);\r\n            polls[indexPoll].photo = info.fileList[0].response.id;\r\n            this.setState({\r\n                polls: polls\r\n            });\r\n\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: `${info.file.name} file uploaded successfully`,\r\n            });\r\n            // message.success(`${info.file.name} file uploaded successfully`);\r\n        } else if (info.file.status === \"error\") {\r\n            console.log(info);\r\n            if(info.file.response!=null){\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: `${info.file.response.message}`,\r\n                });\r\n            }else{\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: `${info.file.name} file upload failed. Max file size is 20MB`,\r\n                });\r\n            }\r\n            \r\n            //   message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n    }\r\n    onChangeUploadChoice = (info,indexChoice, indexPoll) => {\r\n        if (info.file.status !== \"uploading\") {\r\n            //console.log(info);\r\n            //console.log(this.state.polls);\r\n\r\n        }\r\n        if (info.fileList.length === 0) {\r\n            const polls = this.state.polls.slice();\r\n            deleteImage(polls[indexPoll].choices[indexChoice].photo);\r\n            const choiceitem = Object.assign(polls[indexPoll].choices[indexChoice], {\r\n                photo: null\r\n            });\r\n            polls[indexPoll].choices[indexChoice] = choiceitem\r\n            this.setState({\r\n                polls: polls\r\n            });\r\n        }\r\n        if (info.file.status === \"done\") {\r\n            const polls = this.state.polls.slice();\r\n            const choiceitem = Object.assign(this.state.polls[indexPoll].choices[indexChoice], {\r\n                photo: info.fileList[0].response.id\r\n            });\r\n\r\n        polls[indexPoll].choices[indexChoice] = choiceitem\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: `${info.file.name} file uploaded successfully`,\r\n            });\r\n            // message.success(`${info.file.name} file uploaded successfully`);\r\n        } else if (info.file.status === \"error\") {\r\n            if(info.file.response!=null){\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: `${info.file.response.message}`,\r\n                });\r\n            }else{\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: `${info.file.name} file upload failed. Max file size is 20MB`,\r\n                });\r\n            }\r\n            //   message.error(`${info.file.name} file upload failed.`);\r\n        }\r\n    }\r\n    handleChoiceChangeReview = (event, indexChoice, indexPoll)=> {\r\n        const polls = this.state.polls.slice();\r\n        const value = event.target.value;\r\n        const choiceitem = Object.assign(this.state.polls[indexPoll].choices[indexChoice], {\r\n            review: value,\r\n            ...this.validateChoice(this.state.polls[indexPoll].choices[indexChoice].text)\r\n        });\r\n\r\n        polls[indexPoll].choices[indexChoice] = choiceitem\r\n        this.setState({\r\n            polls: polls\r\n        });\r\n    }\r\n    render() {\r\n        //console.log(this.state.polls);\r\n        const childrenUser = [];\r\n        this.state.users.forEach((user, index) => {\r\n            childrenUser.push(<Option key={index} value={user.id}><Avatar className=\"poll-creator-avatar\"\r\n                style={{ backgroundColor: getAvatarColor(user.name) }} >\r\n                {user.name[0].toUpperCase()}\r\n            </Avatar>\r\n                <span className=\"poll-creator-name\">\r\n                    {user.name}\r\n                </span></Option>);\r\n        })\r\n\r\n\r\n        const pollViews = [];\r\n\r\n        this.state.polls.forEach((poll, index) => {\r\n            const choiceViews = [];\r\n            poll.choices.forEach((choice, index2) => {\r\n                choiceViews.push(<PollChoice key={index2} choice={choice} choiceNumber={index2} pollNumber={index} removeChoice={this.removeChoice} handleChoiceChange={this.handleChoiceChange} handleChoiceChangeReview={this.handleChoiceChangeReview} onChangeUploadChoice={this.onChangeUploadChoice}/>);\r\n            });\r\n            pollViews.push(<PollCreate key={index} poll={poll} choiceViews={choiceViews} pollNumber={index} handleQuestionChange={this.handleQuestionChange}\r\n                addChoice={this.addChoice} handlePollDaysChange={this.handlePollDaysChange} handlePollHoursChange={this.handlePollHoursChange}\r\n                onChangeIsUnseenUserForVote={this.onChangeIsUnseenUserForVote} onChangeIsUnseenUserForAddChoice={this.onChangeIsUnseenUserForAddChoice}\r\n                onChangeIsAddChoice={this.onChangeIsAddChoice} onChangeIsCanFix={this.onChangeIsCanFix} handleChangemaxVotePerTimeLoad={this.handleChangemaxVotePerTimeLoad}\r\n                handleChangemaxVotePerChoice={this.handleChangemaxVotePerChoice} handleChangemaxVoteOfPoll={this.handleChangemaxVoteOfPoll}\r\n                handleTimeLoadDaysChange={this.handleTimeLoadDaysChange} handleTimeLoadHoursChange={this.handleTimeLoadHoursChange} handleShowResultCaseChange={this.handleShowResultCaseChange}\r\n                onChangeUpload={this.onChangeUpload} removePoll={this.removePoll} onChangeIsHasPollLength={this.onChangeIsHasPollLength}/>);\r\n        });\r\n        return (\r\n            <div className=\"new-poll-container\">\r\n                <h1 className=\"page-title\">Create Post</h1>\r\n                <div className=\"new-poll-content\">\r\n                    <Form onFinish={this.handleSubmit} className=\"create-poll-form\">\r\n                        <FormItem className=\"poll-form-row\">\r\n                            <TextArea\r\n                                placeholder=\"Enter your question\"\r\n                                style={{ fontSize: '16px' }}\r\n                                autosize={{ minRows: 3, maxRows: 6 }}\r\n                                name=\"question\"\r\n                                value={this.state.question.text}\r\n                                onChange={this.handleQuestionForPostChange} />\r\n                        </FormItem>\r\n                        <Row gutter={[48, 16]}>\r\n                            <Col xs={12}>\r\n                                Đăng ẩn danh\r\n                            </Col>\r\n                            <Col xs={12}>\r\n                                <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" onChange={this.onChangeIsUnseenOwner} />\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                Chế độ đăng:\r\n                            </Col>\r\n                            <Col span={12}>\r\n                                <Select\r\n                                    name=\"hours\"\r\n                                    onChange={this.handleShowCaseChange}\r\n                                    value={this.state.showCase}\r\n                                    style={{ width: 200 }}\r\n                                >\r\n                                    <Option key={1} value={1}>Bí mật</Option>\r\n                                    <Option key={2} value={2}>Riêng tư</Option>\r\n                                    <Option key={3} value={3}>Công khai</Option>\r\n                                    <Option key={4} value={4}>Giới hạn người</Option>\r\n                                    <Option key={5} value={5}>Nhóm</Option>\r\n                                </Select>\r\n                            </Col>\r\n                            {this.state.showCase === 4 ? <Col xs={12}>Những người sẽ nhìn thấy bài đăng: </Col> : null}\r\n                            {this.state.showCase === 4 ? <Col xs={12}><FormItem validateStatus={this.state.validateStatusUser}\r\n            help={this.state.errorMsgUser}><Mentions style={{ width: '100%' }} placeholder=\"Nhập '@' để tag bạn bè\" loading={this.state.loading} onSearch={this.onSearch} onChange={this.onSelect}>\r\n                                {this.state.users.map(({ id, username, name }) => (\r\n                                    <Option key={id} value={username} className=\"antd-demo-dynamic-option\">\r\n                                        <span>{name} @{username}</span>\r\n                                    </Option>\r\n                                ))}\r\n                            </Mentions></FormItem></Col> : null}\r\n                            {this.state.showCase === 5 ? <Col xs={12}>Những nhóm sẽ đăng: </Col> : null}\r\n                            {this.state.showCase === 5 ? <Col xs={12}><FormItem validateStatus={this.state.validateStatusGroup}\r\n            help={this.state.errorMsgGroup}><Mentions style={{ width: '100%' }} placeholder=\"Nhập '@' để tag nhóm\" loading={this.state.loading} onSearch={this.onSearchGroup} onChange={this.onSelectGroup}>\r\n                                {this.state.groups.map((group) => (\r\n                                    <Option key={group.id} value={group.code} className=\"antd-demo-dynamic-option\">\r\n                                        <span>{group.name} @{group.code}</span>\r\n                                    </Option>\r\n                                ))}\r\n                            </Mentions></FormItem></Col> : null}\r\n                            <Col xs={12}>\r\n                                Lên lịch đăng bài\r\n                            </Col>\r\n                            <Col xs={12}>\r\n                                <Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" onChange={this.onChangeIsDelay} />\r\n                            </Col>\r\n                            {this.state.isDelay ? <Col span={12}>\r\n                                Ngày giờ đăng:\r\n                            </Col> : null}\r\n                            {this.state.isDelay ?\r\n                                <Col span={12}>\r\n                                    <Space direction=\"vertical\" size={12}>\r\n                                        <DatePicker\r\n                                            format=\"DD-MM-YYYY HH:mm:ss\"\r\n                                            disabledDate={this.disabledDate}\r\n                                            disabledTime={this.disabledDateTime}\r\n                                            showTime={{ defaultValue: moment('00:00:00', 'HH:mm:ss') }}\r\n                                            showNow={false}\r\n                                            value={this.state.publicDateMoment}\r\n                                            onChange={this.handlePublicDateChange}\r\n                                        />\r\n                                    </Space></Col> : null}\r\n                        </Row>\r\n\r\n                        {pollViews}\r\n\r\n                        <FormItem className=\"poll-form-row\">\r\n                            <Button type=\"dashed\" onClick={this.addPoll}>\r\n                                <PlusOutlined/> Add a Poll\r\n                            </Button>\r\n                        </FormItem>\r\n                        <FormItem className=\"poll-form-row\">\r\n                            <Button type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                size=\"large\"\r\n                                disabled={this.isFormInvalid()}\r\n                                className=\"create-poll-form-button\">Create Post</Button>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst PollCreate = (props) => {\r\n    const config = {\r\n        name: \"file\",\r\n        action: API_BASE_URL + \"/file/upload\",\r\n        headers: {\r\n            authorization:\r\n                'Bearer ' + localStorage.getItem(ACCESS_TOKEN)\r\n        },\r\n\r\n    };\r\n    return (\r\n        <div className=\"new-poll-container\">\r\n            <h1 className=\"page-title\">Create Poll {(props.pollNumber + 1)}\r\n            {\r\n                props.pollNumber > 0 ? (\r\n                    <CloseOutlined className=\"dynamic-delete-button-poll\" disabled={props.pollNumber === 0} onClick={() => props.removePoll(props.pollNumber)} />\r\n                ) : null\r\n            }</h1>\r\n            <div className=\"new-poll-content\">\r\n                <FormItem className=\"poll-form-row\">\r\n                    <TextArea\r\n                        placeholder=\"Enter your question\"\r\n                        style={{ fontSize: '16px' }}\r\n                        autosize={{ minRows: 3, maxRows: 6 }}\r\n                        name=\"question\"\r\n                        value={props.poll.question.text}\r\n                        onChange={(event) => props.handleQuestionChange(event, props.pollNumber)} />\r\n                </FormItem>\r\n                <FormItem className=\"poll-form-row\">\r\n                    <Upload {...config} listType=\"picture\" maxCount={1} onChange={(info) => props.onChangeUpload(info, props.pollNumber)}>\r\n                        {props.poll.photo === \"\" ? <Button icon={<UploadOutlined />}>Upload (Max: 1)</Button> : null}\r\n                    </Upload></FormItem>\r\n                {props.choiceViews}\r\n                <FormItem className=\"poll-form-row\">\r\n                    <Button type=\"dashed\" onClick={(event) => props.addChoice(event, props.pollNumber)} disabled={props.poll.choices.length === MAX_CHOICES}>\r\n                        <PlusOutlined/> Add a choice\r\n                    </Button>\r\n                </FormItem>\r\n                <Row gutter={[48, 16]}>\r\n                    <Col span={12}>Thời hạn kết thúc: &nbsp;\r\n                    </Col><Col span={12}><Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" defaultChecked onChange={() => props.onChangeIsHasPollLength(props.pollNumber)} />\r\n                    </Col>\r\n                    {props.poll.isHasPollLength ?<Col span={12}>\r\n                        Poll length:\r\n                    </Col>:null}\r\n                    {props.poll.isHasPollLength ?<Col span={12}>\r\n                        <span style={{ marginRight: '18px' }}>\r\n                            <Select\r\n                                name=\"days\"\r\n                                defaultValue=\"1\"\r\n                                onChange={(event) => props.handlePollDaysChange(event, props.pollNumber)}\r\n                                value={props.poll.pollLength.days}\r\n                                style={{ width: 60 }} >\r\n                                {\r\n                                    Array.from(Array(8).keys()).map(i =>\r\n                                        <Option key={i}>{i}</Option>\r\n                                    )\r\n                                }\r\n                            </Select> &nbsp;Days\r\n                        </span>\r\n                        <span>\r\n                            <Select\r\n                                name=\"hours\"\r\n                                defaultValue=\"0\"\r\n                                onChange={(event) => props.handlePollHoursChange(event, props.pollNumber)}\r\n                                value={props.poll.pollLength.hours}\r\n                                style={{ width: 60 }} >\r\n                                {\r\n                                    Array.from(Array(24).keys()).map(i =>\r\n                                        <Option key={i}>{i}</Option>\r\n                                    )\r\n                                }\r\n                            </Select> &nbsp;Hours\r\n                        </span>\r\n                    </Col>:null}\r\n\r\n\r\n                    <Col span={12}>Bầu chọn ẩn danh&nbsp;\r\n                    </Col><Col span={12}><Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" onChange={() => props.onChangeIsUnseenUserForVote(props.pollNumber)} />\r\n                    </Col><Col span={12}>Cho phép thêm lựa chọn&nbsp;\r\n                    </Col><Col span={12}><Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" onChange={() => props.onChangeIsAddChoice(props.pollNumber)} />\r\n                    </Col>\r\n                    {props.poll.isAddChoice ? (<Col span={12}>Người thêm lựa chọn bị ẩn danh&nbsp;</Col>) : null}\r\n                    {props.poll.isAddChoice ? (<Col span={12}><Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" disabled={props.poll.isAddChoice ? false : true} onChange={() => props.onChangeIsUnseenUserForAddChoice(props.pollNumber)} />\r\n                    </Col>) : null}<Col span={12}>Cho phép sửa lựa chọn&nbsp;\r\n                    </Col><Col span={12}><Switch checkedChildren=\"Có\" unCheckedChildren=\"Không\" defaultChecked onChange={() => props.onChangeIsCanFix(props.pollNumber)} />\r\n                    </Col>\r\n                    <Col span={12}>Số lượng phiếu bầu tối đa:</Col>\r\n                    <Col span={12}><InputNumber min={1} defaultValue={1} value={props.poll.maxVotePerTimeLoad} onChange={(event) => props.handleChangemaxVotePerTimeLoad(event, props.pollNumber)} />\r\n                        &nbsp;Lần</Col>\r\n                    <Col span={12}>Mỗi lựa chọn được bầu tối đa:</Col>\r\n                    <Col span={12}><InputNumber min={1} defaultValue={1} value={props.poll.maxVotePerChoice} onChange={(event) => props.handleChangemaxVotePerChoice(event, props.pollNumber)} />\r\n                        &nbsp;Lần</Col>\r\n                    {props.poll.timeLoad.hours === 0 && props.poll.timeLoad.days === 0 ? null : (<Col span={12}>Số lượng phiếu bầu tối đa 2:</Col>)}\r\n                    {props.poll.timeLoad.hours === 0 && props.poll.timeLoad.days === 0 ? null : (\r\n\r\n                        <Col span={12}><InputNumber min={1} defaultValue={1} value={props.poll.maxVoteOfPoll} disabled={props.poll.timeLoad.hours === 0 && props.poll.timeLoad.days === 0 ? true : false} onChange={(event) => props.handleChangemaxVoteOfPoll(event, props.pollNumber)} />\r\n                            &nbsp;Lần</Col>)\r\n                    }\r\n                    <Col style={{display:\"none\"}} span={12}>\r\n                        Thời gian được thiết lập lại số phiếu:\r\n                    </Col>\r\n                    <Col span={12} style={{display:\"none\"}}>\r\n                        <span style={{ marginRight: '18px' }}>\r\n                            <Select\r\n                                name=\"days\"\r\n                                defaultValue=\"1\"\r\n                                onChange={(event) => props.handleTimeLoadDaysChange(event, props.pollNumber)}\r\n                                value={props.poll.timeLoad.days}\r\n                                style={{ width: 60 }} >\r\n                                {\r\n                                    Array.from(Array(8).keys()).map(i =>\r\n                                        <Option key={i}>{i}</Option>\r\n                                    )\r\n                                }\r\n                            </Select> &nbsp;Days\r\n                        </span>\r\n                        <span>\r\n                            <Select\r\n                                name=\"hours\"\r\n                                defaultValue=\"0\"\r\n                                onChange={(event) => props.handleTimeLoadHoursChange(event, props.pollNumber)}\r\n                                value={props.poll.timeLoad.hours}\r\n                                style={{ width: 60 }} >\r\n                                {\r\n                                    Array.from(Array(24).keys()).map(i =>\r\n                                        <Option key={i}>{i}</Option>\r\n                                    )\r\n                                }\r\n                            </Select> &nbsp;Hours\r\n                        </span>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        Chế độ hiển thị kết quả:\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Select\r\n                            name=\"hours\"\r\n                            onChange={(event) => props.handleShowResultCaseChange(event, props.pollNumber)}\r\n                            value={props.poll.showResultCase}\r\n                            style={{ width: 200 }}\r\n                        >\r\n                            <Option key={1} value={1}>Được xem ngay</Option>\r\n                            <Option key={2} value={2}>Sau khi kết thúc</Option>\r\n                            <Option key={3} value={3} disabled={props.poll.isCanFix ? true : false}>Sau khi bầu</Option>\r\n                            <Option key={4} value={4}>Không được xem</Option>\r\n                        </Select>\r\n                    </Col>\r\n                </Row>\r\n                {/* <Select\r\n                        name=\"timeRS\"\r\n                        defaultValue=\"0\"\r\n                        onChange={this.handleChangetimeLoad}\r\n                        value={this.state.timeLoad}\r\n                        style={{ width: 60 }} >\r\n                        {\r\n                            Array.from(Array(100).keys()).map(i =>\r\n                                <Option key={i}>{i}</Option>\r\n                            )\r\n                        }\r\n                    </Select> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst PollChoice = (props) => {\r\n    const config = {\r\n        name: \"file\",\r\n        action: API_BASE_URL + \"/file/upload\",\r\n        headers: {\r\n            authorization:\r\n                'Bearer ' + localStorage.getItem(ACCESS_TOKEN)\r\n        },\r\n\r\n    };\r\n    return (\r\n        <FormItem validateStatus={props.choice.validateStatus}\r\n            help={props.choice.errorMsg} className=\"poll-form-row\">\r\n            <Input\r\n                placeholder={'Choice ' + (props.choiceNumber + 1)}\r\n                size=\"large\"\r\n                value={props.choice.text}\r\n                className={props.choiceNumber > 1 ? \"optional-choice\" : null}\r\n                onChange={(event) => props.handleChoiceChange(event, props.choiceNumber, props.pollNumber)} />\r\n            {\r\n                props.choiceNumber > 1 ? (\r\n                    <CloseOutlined className=\"dynamic-delete-button\" disabled={props.choiceNumber <= 1} onClick={() => props.removeChoice(props.choiceNumber, props.pollNumber)} />\r\n                ) : null\r\n            }\r\n            <TextArea\r\n                placeholder={'Review ' + (props.choiceNumber + 1)}\r\n                size=\"large\"\r\n                value={props.choice.review}\r\n                className={props.choiceNumber > 1 ? \"optional-textchoice\" : \"choice\"}\r\n                onChange={(event) => props.handleChoiceChangeReview(event, props.choiceNumber, props.pollNumber)}\r\n                 />\r\n                 <Upload {...config} listType=\"picture\" className=\"upload-inline\" maxCount={1} onChange={(info) => props.onChangeUploadChoice(info, props.choiceNumber, props.pollNumber)}>\r\n                    {props.choice.photo == null ? <Button className=\"button-upload\" icon={<UploadOutlined />}>Upload</Button> : <Button className=\"button-upload\" disabled icon={<UploadOutlined />}>Upload</Button>}\r\n                </Upload>\r\n\r\n\r\n        </FormItem>\r\n    );\r\n}\r\n\r\n\r\nexport default NewPoll;","import React, { Component } from 'react';\r\nimport { login,confirmMail } from '../../util/APIUtils';\r\nimport './Login.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { ACCESS_TOKEN } from '../../constants';\r\nimport { UserOutlined,LockOutlined } from '@ant-design/icons';\r\n\r\nimport { Form, Input, Button, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\n\r\nclass LoginForm extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        console.log(this.props.type)\r\n        if(this.props.type === \"confirm\"){\r\n            this.props.history.push(\"/login\");\r\n            confirmMail(this.props.match.params.code)\r\n            .then(response => {\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: 'Your accout is Active. Welcome to website!'\r\n                });   \r\n                this.props.history.push(\"/login\");\r\n            }).catch(error => {\r\n                if(error.status === 401) {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: 'Your Username or Password is incorrect. Please try again!'\r\n                    });                    \r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });                                            \r\n                }\r\n            });\r\n        }\r\n    }\r\n    handleSubmit = values => {\r\n                const loginRequest = Object.assign({}, values);\r\n                login(loginRequest)\r\n                .then(response => {\r\n                    localStorage.setItem(ACCESS_TOKEN, response.accessToken);\r\n                    this.props.onLogin();\r\n                }).catch(error => {\r\n                    if(error.status === 401) {\r\n                        notification.error({\r\n                            message: 'Polling App',\r\n                            description: 'Your Username or Password is incorrect. Please try again!'\r\n                        });                    \r\n                    } else {\r\n                        notification.error({\r\n                            message: 'Polling App',\r\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                        });                                            \r\n                    }\r\n                });\r\n            }\r\n\r\n    render() {\r\n        //const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div className=\"login-container\">\r\n                <h1 className=\"page-title\">Login</h1>\r\n                <div className=\"login-content\">\r\n            <Form onFinish={this.handleSubmit} className=\"login-form\">\r\n                <FormItem name=\"usernameOrEmail\" rules =  {[{ required: true, message: 'Please input your username or email!' }]}>\r\n                    <Input \r\n                        prefix={<UserOutlined />}\r\n                        size=\"large\"\r\n                        name=\"usernameOrEmail\" \r\n                        autoComplete=\"usernameOrEmail\"\r\n                        placeholder=\"Username or Email\" />    \r\n                </FormItem>\r\n                <FormItem name = \"password\" rules={[{ required: true, message: 'Please input your Password!' }]}>\r\n                    <Input.Password \r\n                        prefix={<LockOutlined />}\r\n                        size=\"large\"\r\n                        name=\"password\" \r\n                        type=\"password\" \r\n                        autoComplete=\"password\"\r\n                        placeholder=\"Password\"  />                   \r\n                </FormItem>\r\n                <FormItem>\r\n                    <Button type=\"primary\" htmlType=\"submit\" size=\"large\" className=\"login-form-button\">Login</Button>\r\n                    Or <Link to=\"/signup\">register now!</Link>\r\n                </FormItem>\r\n            </Form>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default LoginForm;","import React, { Component } from 'react';\r\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../../util/APIUtils';\r\nimport './Signup.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../../constants';\r\n\r\nimport { Form, Input, Button, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n    \r\n        const signupRequest = {\r\n            name: this.state.name.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        notification.success({\r\n            message: 'Polling App',\r\n            description: \"Thank you! Please check your mail!\",\r\n        });     \r\n        signup(signupRequest)\r\n        .then(response => {\r\n                 \r\n            this.props.history.push(\"/login\");\r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.name.validateStatus === 'success' &&\r\n            this.state.username.validateStatus === 'success' &&\r\n            this.state.email.validateStatus === 'success' &&\r\n            this.state.password.validateStatus === 'success'\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Sign Up</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form onFinish={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem \r\n                            label=\"Full Name\"\r\n                            validateStatus={this.state.name.validateStatus}\r\n                            help={this.state.name.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"name\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your full name\"\r\n                                value={this.state.name.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \r\n                        </FormItem>\r\n                        <FormItem label=\"Username\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.username.validateStatus}\r\n                            help={this.state.username.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"username\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique username\"\r\n                                value={this.state.username.value} \r\n                                onBlur={this.validateUsernameAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Email\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.email.validateStatus}\r\n                            help={this.state.email.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"email\" \r\n                                type=\"email\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your email\"\r\n                                value={this.state.email.value} \r\n                                onBlur={this.validateEmailAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Password\"\r\n                            validateStatus={this.state.password.validateStatus}\r\n                            help={this.state.password.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"password\" \r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A password between 6 to 20 characters\" \r\n                                value={this.state.password.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \r\n                        </FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Sign up</Button>\r\n                            Already registed? <Link to=\"/login\">Login now!</Link>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateName = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email may not be empty'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This username is already taken'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This Email is already registered'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Signup;","import React from 'react';\r\nimport './NotFound.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"page-not-found\">\r\n            <h1 className=\"title\">\r\n                404\r\n            </h1>\r\n            <div className=\"desc\">\r\n                The Page you're looking for was not found.\r\n            </div>\r\n            <Link to=\"/\"><Button className=\"go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport './ServerError.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nconst ServerError = () => {\r\n    return (\r\n        <div className=\"server-error-page\">\r\n            <h1 className=\"server-error-title\">\r\n                500\r\n            </h1>\r\n            <div className=\"server-error-desc\">\r\n                Oops! Something went wrong at our Server. Why don't you go back?\r\n            </div>\r\n            <Link to=\"/\"><Button className=\"server-error-go-back-btn\" type=\"primary\" size=\"large\">Go Back</Button></Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ServerError;","import React, { Component } from 'react';\r\nimport PostList from '../../poll/PostList';\r\nimport { getUserProfile, changeAvatar, changeName } from '../../util/APIUtils';\r\nimport { Avatar, Tabs, notification, Button } from 'antd';\r\nimport { getAvatarColor } from '../../util/Colors';\r\nimport { formatDate } from '../../util/Helpers';\r\nimport LoadingIndicator from '../../common/LoadingIndicator';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport './Profile.css';\r\nimport NotFound from '../../common/NotFound';\r\nimport ServerError from '../../common/ServerError';\r\nimport { Upload, Input,Form } from 'antd';\r\nimport ImgCrop from 'antd-img-crop';\r\nimport { CameraOutlined, EditOutlined,CloseOutlined } from '@ant-design/icons';\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, API_BASE_URL,ACCESS_TOKEN\r\n} from '../../constants';\r\n// import 'antd/es/modal/style';\r\n// import 'antd/es/slider/style';\r\n// import Form from 'antd/lib/form/Form';\r\nconst TabPane = Tabs.TabPane;\r\nclass Profile extends Component {\r\n    _isMounted = false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: null,\r\n            urlImage: \"\",\r\n            isLoading: false,\r\n            uploading: false,\r\n            fileResponse: [],\r\n            fileList: [],\r\n            isEdit: false,\r\n            valueName: \"\",\r\n            stompClient: null\r\n        }\r\n        this.loadUserProfile = this.loadUserProfile.bind(this);\r\n    }\r\n    beforeUpload = async file => {\r\n        if (this._isMounted) {\r\n            this.setState(state => ({\r\n                fileList: [...state.fileList, file],\r\n            }));\r\n        }\r\n        const formData = new FormData();\r\n        formData.append(\"file\", this.state.fileList[0]);\r\n        //console.log(this.state.fileList);\r\n        changeAvatar(formData)\r\n            .then(res => {\r\n                //console.log(res.data);\r\n                \r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: `Avatar file uploaded successfully`,\r\n                });\r\n                window.location = window.location.href;\r\n            });\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                uploading: true,\r\n            });\r\n        }\r\n        \r\n        return false;\r\n    };\r\n\r\n    loadUserProfile(username) {\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                isLoading: true\r\n            });\r\n        }\r\n\r\n        getUserProfile(username)\r\n            .then(response => {\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        user: response,\r\n                        valueName: response.name,\r\n                        isLoading: false\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                if (error.status === 404) {\r\n                    if (this._isMounted) {\r\n                        this.setState({\r\n                            notFound: true,\r\n                            isLoading: false\r\n                        });\r\n                    }\r\n                } else {\r\n                    if (this._isMounted) {\r\n                        this.setState({\r\n                            serverError: true,\r\n                            isLoading: false\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        const username = this.props.match.params.username;\r\n        if(this.props.currentUser!=null){\r\n            this.loadUserProfile(username);\r\n        \r\n            const socket = new SockJS(API_BASE_URL + '/ws');\r\n            const stompClient = Stomp.over(socket);\r\n            const headers = { Authorization: 'Bearer ' + localStorage.getItem(ACCESS_TOKEN) };\r\n            stompClient.connect(headers, () => {\r\n                stompClient.subscribe(\r\n                    '/user/queue/item', (response) => this.socketPoll(JSON.parse(response.body)), headers,\r\n                );\r\n            });\r\n            if (this._isMounted) {\r\n                this.setState({\r\n                    stompClient: stompClient\r\n                })\r\n            }\r\n        }\r\n        \r\n        \r\n        console.log(\"dimount profile\")\r\n\r\n    }\r\n\r\n    socketPoll = (data) => {\r\n        if(data.type===10)\r\n        {\r\n            notification.info({\r\n                message: `Notification`,\r\n                description:\r\n                  data.name,\r\n                  placement: \"bottomLeft\",\r\n                  onClick: ()=>this.props.history.push(\"/post/\"+data.postId)\r\n              });\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this._isMounted = false;\r\n       if (this.state.stompClient != null) {\r\n            //console.log(\"disccccccccccccccccccccccco\")\r\n            this.state.stompClient.send('/app/stop', {});\r\n            this.state.stompClient.disconnect();\r\n        }\r\n        console.log(\"unmount\")\r\n    }\r\n    componentDidUpdate(nextProps) {\r\n        if (this.props.match.params.username !== nextProps.match.params.username) {\r\n            this.loadUserProfile(nextProps.match.params.username);\r\n        }\r\n    }\r\n    enter = (event) => {\r\n        const name = event.target.value;\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                isLoading: true\r\n            });\r\n        }\r\n        changeName(name)\r\n            .then(response => {\r\n                if (this._isMounted) {\r\n                    this.setState({\r\n                        user: {\r\n                            ...this.state.user,\r\n                            name: name\r\n                        },\r\n                        valueName: name,\r\n\r\n                    });\r\n                }\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: response.message || 'Change name Succesfully!'\r\n                });\r\n            }).catch(error => {\r\n                if (error.status === 401) {\r\n                    this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n                } else {\r\n                    notification.error({\r\n                        message: 'Polling App',\r\n                        description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                }\r\n            });\r\n        if (this._isMounted) {\r\n            this.setState({\r\n                isEdit: !this.state.isEdit,\r\n                isLoading: false\r\n            })\r\n        }\r\n    }\r\n    validateName = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n    onEdit = () => {\r\n        this.setState({\r\n            isEdit: !this.state.isEdit\r\n        })\r\n    }\r\n    onChangeName = (event,validateFunc) => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            valueName: value,\r\n            ...validateFunc(value)\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return <LoadingIndicator />;\r\n        }\r\n\r\n        if (this.state.notFound) {\r\n            return <NotFound />;\r\n        }\r\n\r\n        if (this.state.serverError) {\r\n            return <ServerError />;\r\n        }\r\n\r\n        const tabBarStyle = {\r\n            textAlign: 'center'\r\n        };\r\n        return (\r\n            <div className=\"profile\">\r\n                {\r\n                    this.state.user ? (\r\n                        <div className=\"user-profile\">\r\n                            <div className=\"user-details\">\r\n                                <div className=\"user-avatar\">\r\n                                    {this.props.currentUser.username === this.state.user.username ?\r\n                                        <ImgCrop rotate>\r\n                                            <Upload\r\n                                                // listType=\"picture-card\"\r\n                                                fileList={this.state.fileList}\r\n                                                beforeUpload={this.beforeUpload}\r\n                                            >\r\n                                                <CameraOutlined style={{ position: \"absolute\", marginLeft: \"52px\", marginTop: \"52px\", zIndex: \"1\" }} />\r\n                                                {this.state.user.photo == null ?\r\n                                                    (<Avatar className=\"user-avatar-circle ava\"\r\n                                                        style={{ backgroundColor: getAvatarColor(this.state.user.name) }} >\r\n                                                        {this.state.user.name[0].toUpperCase()}\r\n                                                    </Avatar>) : (\r\n                                                        <Avatar className=\"user-avatar-circle  ava\" \r\n                                                        //src={API_BASE_URL+\"/file/getImage/\" + this.state.user.photo} \r\n                                                        src={\"https://drive.google.com/uc?export=view&id=\"+this.state.user.photo}\r\n                                                        />)}\r\n                                                {/* <Avatar className=\"user-avatar-circle\" src={\"http://localhost:5000/api/file/getImage/\" + this.state.user.photo} /> */}\r\n                                                {/* <Avatar className=\"user-avatar-circle\" style={{ backgroundColor: getAvatarColor(this.state.user.name)}}>\r\n                                        {this.state.user.name[0].toUpperCase()}\r\n                                    </Avatar> */}\r\n                                            </Upload>\r\n                                        </ImgCrop> : <>{this.state.user.photo == null ?\r\n                                            (<Avatar className=\"user-avatar-circle\"\r\n                                                style={{ backgroundColor: getAvatarColor(this.state.user.name) }} >\r\n                                                {this.state.user.name[0].toUpperCase()}\r\n                                            </Avatar>) : (\r\n                                                <Avatar className=\"user-avatar-circle\" \r\n                                                src={\"https://drive.google.com/uc?export=view&id=\"+this.state.user.photo}\r\n                                                //src={API_BASE_URL+\"/file/getImage/\" + this.state.user.photo} \r\n                                                />)}</>}\r\n                                </div>\r\n                                {/* <ReactAudioPlayer\r\n                                    src=\"http://localhost:5000/api/file/getAudio/Part_1.mp3\"\r\n                                    controls\r\n                                /> */}\r\n\r\n                                <div className=\"user-summary\">\r\n                                    <div className=\"full-name\">{this.state.isEdit ? <><Form><Form.Item validateStatus={this.state.validateStatus}\r\n                            help={this.state.errorMsg}><Input value={this.state.valueName} onChange={(event) => this.onChangeName(event, this.validateName)} onPressEnter={this.enter}></Input><Button type=\"text\" shape=\"circle\" onClick={this.onEdit} style={{ float: \"right\",position: \"fixed\" }} icon={<CloseOutlined />}></Button></Form.Item></Form></> : <>{this.state.user.name}{this.state.user.username === this.props.currentUser.username && <Button type=\"text\" shape=\"circle\" onClick={this.onEdit} style={{ float: \"right\" }} icon={<EditOutlined />}></Button>}</>}</div>\r\n                                    <div className=\"username\">@{this.state.user.username}</div>\r\n                                    <div className=\"user-joined\">\r\n                                        Joined {formatDate(this.state.user.joinedAt)}\r\n                                    </div>\r\n                                </div>\r\n                                {/* <div className=\"user-summary\">\r\n                                    <div className=\"full-name\">{this.state.user.name}{this.state.user.username===this.props.currentUser.username&&<Button type=\"text\" shape=\"circle\" style={{ float: \"right\" }} icon={<EditOutlined />}></Button>}</div>\r\n                                    <div className=\"username\">@{this.state.user.username}</div>\r\n                                    <div className=\"user-joined\">\r\n                                        Joined {formatDate(this.state.user.joinedAt)}\r\n                                    </div>\r\n                                </div> */}\r\n                            </div>\r\n                            <div className=\"user-poll-details\">\r\n                                <Tabs defaultActiveKey=\"1\"\r\n                                    animated={false}\r\n                                    tabBarStyle={tabBarStyle}\r\n                                    size=\"large\"\r\n                                    onChange={this.callBack}\r\n                                    className=\"profile-tabs\">\r\n                                    <TabPane tab={`${this.state.user.pollCount} Posts`} key=\"1\">\r\n                                        <PostList socket={true} key=\"1\" currentUser={this.props.currentUser} handleLogout={this.props.handleLogout} username={this.props.match.params.username} type=\"USER_CREATED_POSTS\" isAuthenticated={this.props.isAuthenticated} />\r\n                                    </TabPane>\r\n                                    <TabPane tab={`${this.state.user.voteCount} Votes`} key=\"2\">\r\n                                        <PostList socket={true} key=\"2\" currentUser={this.props.currentUser} handleLogout={this.props.handleLogout} username={this.props.match.params.username} type=\"USER_VOTED_POSTS\" isAuthenticated={this.props.isAuthenticated} />\r\n                                    </TabPane>\r\n                                    {this.props.currentUser.username===this.props.match.params.username&&<TabPane tab={`${this.state.user.storageCount} Save`} key=\"3\">\r\n                                        <PostList socket={true} key=\"3\" currentUser={this.props.currentUser} handleLogout={this.props.handleLogout} username={this.props.match.params.username} type=\"USER_SAVE_POSTS\" isAuthenticated={this.props.isAuthenticated} />\r\n                                    </TabPane>}\r\n                                </Tabs>\r\n                            </div>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Profile;","export default __webpack_public_path__ + \"static/media/poll.04e627bb.svg\";","import React, { Component } from 'react';\r\nimport {\r\n  Link,\r\n  withRouter\r\n} from 'react-router-dom';\r\nimport { getUserNotification,readNotification } from '../util/APIUtils';\r\nimport './AppHeader.css';\r\nimport pollIcon from '../poll.svg';\r\nimport { Layout, Menu, Dropdown, Input, Badge} from 'antd';\r\nimport {\r\n  DownOutlined, UserOutlined, HomeOutlined, BellOutlined\r\n} from '@ant-design/icons';\r\n\r\nimport { formatDateTime } from '../util/Helpers';\r\nconst Header = Layout.Header;\r\nconst { Search } = Input;\r\n\r\nclass AppHeader extends Component {\r\n  _isMounted = false;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      notification: [],\r\n      page: 0,\r\n      last: false,\r\n      visible: false\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    this._isMounted = true;\r\n    this.loadUserNotification();\r\n  }\r\n  componentWillUnmount(){\r\n    this._isMounted=false;\r\n  }\r\n  loadUserNotification = (page= 0, size = 5) => {\r\n    getUserNotification(page, size)\r\n      .then(response => {\r\n        console.log(response)\r\n        if (this._isMounted) {\r\n        this.setState({\r\n          notification: this.state.notification.concat(response.content),\r\n          page: response.page,\r\n          last: response.last\r\n        })}\r\n      }).catch(error => {\r\n      });\r\n  }\r\n  handleMenuClick = ({ key })=> {\r\n    if (key === \"logout\") {\r\n      this.props.onLogout();\r\n    }\r\n    if (key === \"profile\") {\r\n      // window.location.assign(\"./user/\"+username)\r\n    }\r\n  }\r\n  handleMenuClick2 = ({ key }) => {\r\n    if(key!==\"more\"){\r\n      const noti = this.state.notification.slice();\r\n      if(this.props.currentUser.notificationCount>key){\r\n        noti[key].read = true;\r\n        \r\n        readNotification(noti[key].id).then(response => {\r\n        }).catch(error => {\r\n        });\r\n        \r\n        const notiItem ={ ...noti[key]};\r\n        //const noti2 = [...noti.slice(0,key),...noti.slice(key+1)];\r\n        noti.splice(key,1);\r\n        noti.splice(this.props.currentUser.notificationCount-1,0,notiItem);\r\n        //noti2.splice(this.props.currentUser.notificationCount-1,0,notiItem);\r\n        this.props.readNoti();\r\n        this.setState({\r\n          notification: noti\r\n        })\r\n      }\r\n      \r\n\r\n      this.props.history.push(\"/post/\" + noti[key].sourceId);\r\n      this.setState({visible:false})\r\n    }\r\n    else this.loadUserNotification(this.state.page+1);\r\n  }\r\n  handleVisibleChange = (flag) =>{\r\n    this.setState({visible: flag});\r\n  }\r\n  onSearch = value => {\r\n    if (value === \"\") this.props.history.push(\"/\");\r\n    else this.props.history.push(\"/search/\" + value);\r\n    console.log(value)\r\n  }\r\n  render(){\r\n  let menuItems;\r\n  if (this.props.currentUser) {\r\n    menuItems = [\r\n      <Menu.Item key=\"/\">\r\n        <Link to=\"/\">\r\n          <HomeOutlined className=\"nav-icon\" />\r\n        </Link>\r\n      </Menu.Item>,\r\n      <Menu.Item key=\"/poll/new\">\r\n        <Link to=\"/poll/new\">\r\n          <img src={pollIcon} alt=\"poll\" className=\"poll-icon\" />\r\n        </Link>\r\n      </Menu.Item>,\r\n      <Menu.Item key=\"/notification\" className=\"profile-menu\">\r\n        <ProfileDropdownMenu2\r\n        visible={this.state.visible}\r\n        handleVisibleChange={this.handleVisibleChange}\r\n        last={this.state.last}\r\n          notification={this.state.notification}\r\n          currentUser={this.props.currentUser}\r\n          handleMenuClick={this.handleMenuClick2} />\r\n      </Menu.Item>,\r\n      <Menu.Item key=\"/profile\" className=\"profile-menu\">\r\n\r\n        <ProfileDropdownMenu\r\n          currentUser={this.props.currentUser}\r\n          handleMenuClick={this.handleMenuClick} />\r\n      </Menu.Item>,\r\n\r\n    ];\r\n  } else {\r\n    menuItems = [\r\n      <Menu.Item key=\"/login\">\r\n        <Link to=\"/login\">Login</Link>\r\n      </Menu.Item>,\r\n      <Menu.Item key=\"/signup\">\r\n        <Link to=\"/signup\">Signup</Link>\r\n      </Menu.Item>\r\n    ];\r\n  }\r\n\r\n  return (\r\n    <Header className=\"app-header\">\r\n      <div style={{ maxWidth: \"1200px\" }} className=\"container\">\r\n        <div className=\"app-title\" >\r\n          <Link to=\"/\">Voting App</Link>\r\n        </div>\r\n        <Search placeholder=\"Search question post\" allowClear onSearch={this.onSearch} style={{ width: 200, paddingTop: 15, marginLeft: \"7%\" }} />\r\n        <Menu\r\n          className=\"app-menu\"\r\n          mode=\"horizontal\"\r\n          selectedKeys={[this.props.location.pathname]}\r\n          style={{ lineHeight: '64px' }} >\r\n          {menuItems}\r\n        </Menu>\r\n      </div>\r\n    </Header>\r\n  );\r\n}\r\n}\r\n\r\nfunction ProfileDropdownMenu(props) {\r\n  const dropdownMenu = (\r\n    <Menu onClick={(key) => props.handleMenuClick(key, props.currentUser.username)} className=\"profile-dropdown-menu\">\r\n      <Menu.Item key=\"user-info\" className=\"dropdown-item\" disabled>\r\n        <div className=\"user-full-name-info\">\r\n          {props.currentUser.name}\r\n        </div>\r\n        <div className=\"username-info\">\r\n          @{props.currentUser.username}\r\n        </div>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.Item key=\"profile\" className=\"dropdown-item\">\r\n        <Link to={`/users/${props.currentUser.username}`}>Profile</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"updatepassword\" className=\"dropdown-item\">\r\n        <Link to={`/changepassword/${props.currentUser.username}`}>Change Password</Link>\r\n      </Menu.Item>\r\n      <Menu.Item key=\"logout\" className=\"dropdown-item\" danger>\r\n        Logout\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <Dropdown\r\n      overlay={dropdownMenu}\r\n      trigger={['click']}\r\n      getPopupContainer={() => document.getElementsByClassName('profile-menu')[0]}>\r\n      <div className=\"ant-dropdown-link\">\r\n        <UserOutlined className=\"nav-icon\" style={{ marginRight: 0 }} /><DownOutlined />\r\n      </div>\r\n    </Dropdown>\r\n  );\r\n}\r\nconst getTime = (time) => {\r\n  if (time == null) return \"\"\r\n  const timeNew = new Date(time).getTime();\r\n  const currentTime = new Date().getTime();\r\n\r\n  var difference_ms = currentTime - timeNew;\r\n  var seconds = Math.floor((difference_ms / 1000) % 60);\r\n  var minutes = Math.floor((difference_ms / 1000 / 60) % 60);\r\n  var hours = Math.floor((difference_ms / (1000 * 60 * 60)) % 24);\r\n  var days = Math.floor(difference_ms / (1000 * 60 * 60 * 24));\r\n\r\n  let timeRemaining;\r\n  if (days > 7) {\r\n    timeRemaining = formatDateTime(time);\r\n  }\r\n  else if (days > 0) {\r\n    timeRemaining = days + \" ngày trước\";\r\n  } else if (hours > 0) {\r\n    timeRemaining = hours + \" giờ trước\";\r\n  } else if (minutes > 0) {\r\n    timeRemaining = minutes + \" phút trước\";\r\n  } else if (seconds > 0) {\r\n    timeRemaining = seconds + \" giây trước\";\r\n  } else {\r\n    timeRemaining = \"Vừa mới\";\r\n  }\r\n\r\n  return timeRemaining;\r\n}\r\nfunction ProfileDropdownMenu2(props) {\r\n\r\n  const notiViews = [];\r\n  props.notification.forEach((noti, index) => {\r\n    notiViews.push(<Menu.Item key={index} className=\"dropdown-item\" style={noti.read ? { color: \"#657786\" } : {}}>\r\n      <div>{noti.content}</div>\r\n      <div>{getTime(noti.createAt)}</div>\r\n    </Menu.Item>);\r\n    if (index === props.currentUser.notificationCount - 1) notiViews.push(<Menu.Divider key=\"line\"/>)\r\n  })\r\n  const dropdownMenu = (\r\n    <Menu onClick={(key) => props.handleMenuClick(key, props.currentUser.username)} className=\"scroll\">\r\n      {notiViews}\r\n      <Menu.Item key=\"more\" className=\"dropdown-item\">\r\n      {!props.last&&<Link to=\"#\">Load More...</Link>}</Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <Dropdown\r\n      overlay={dropdownMenu}\r\n      trigger={['click']}\r\n      onVisibleChange={props.handleVisibleChange}\r\n      visible={props.visible}\r\n      getPopupContainer={() => document.getElementsByClassName('profile-menu')[0]}>\r\n      <div className=\"ant-dropdown-link\">\r\n        <Badge size=\"small\" count={props.currentUser.notificationCount} overflowCount={10}> <BellOutlined className=\"nav-icon\" /></Badge>\r\n      </div>\r\n    </Dropdown>\r\n  );\r\n}\r\n\r\nexport default withRouter(AppHeader);","import React from 'react';\r\nimport {\r\n    Route,\r\n    Redirect\r\n  } from \"react-router-dom\";\r\n  \r\n  \r\nconst PrivateRoute = ({ component: Component, authenticated, ...rest }) => (\r\n    <Route\r\n      {...rest}\r\n      render={props =>\r\n        authenticated ? (\r\n          <Component {...rest} {...props} />\r\n        ) : (\r\n          <Redirect\r\n            to={{\r\n              pathname: '/login',\r\n              state: { from: props.location }\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    />\r\n);\r\n  \r\nexport default PrivateRoute","import React, { Component } from 'react';\r\nimport { createGroup, checkGroupCodeAvailability,getListUser } from '../util/APIUtils';\r\nimport './NewGroup.css';\r\nimport {\r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH,\r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    USER_MAX_LENGTH\r\n} from '../constants';\r\n\r\nimport { Form, Input, Button, notification,Mentions,Select } from 'antd';\r\nconst FormItem = Form.Item;\r\nconst Option = Select.Option;\r\nconst { getMentions } = Mentions;\r\n\r\nclass NewGroup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: ''\r\n            },\r\n            code: {\r\n                value: ''\r\n            },\r\n            users: [],\r\n            usersSend: []\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateGroupCodeAvailability = this.validateGroupCodeAvailability.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n    validateUsers = (mentions) =>{\r\n        //console.log(mentions.length)\r\n        if (mentions.length === 0) {\r\n            return {\r\n                validateStatusUser: 'error',\r\n                errorMsgUser: 'Please enter a username!'\r\n            }\r\n        } else if (mentions.length > USER_MAX_LENGTH) {\r\n            return {\r\n                validateStatusUser: 'error',\r\n                errorMsgUser: `User is too much (Maximum ${USER_MAX_LENGTH} user allowed)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatusUser: 'success',\r\n                errorMsgUser: null\r\n            }\r\n        }\r\n    }\r\n    loadUserList = (key) => {\r\n        let promise;\r\n        promise = getListUser(key, \"username\");\r\n\r\n        if (!promise) {\r\n            return;\r\n        }\r\n        promise\r\n            .then(response => {\r\n                let users = response.filter((user) => {\r\n                    var check = true;\r\n                    this.state.usersSend.forEach((userSend) => {\r\n                        if (user.username === userSend) {\r\n                            check = false;\r\n                        }\r\n                    })\r\n                    return check;\r\n                })\r\n                this.setState({\r\n                    users: users,\r\n                    loading: false,\r\n                })\r\n\r\n\r\n\r\n            }).catch(error => {\r\n                // this.setState({\r\n                //     users: response\r\n                // })\r\n            });\r\n\r\n    }\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;\r\n        const inputValue = target.value;\r\n        //console.log(this.state.code.value)\r\n        this.setState({\r\n            [inputName]: {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        const groupData = {\r\n            name: this.state.name.value,\r\n            code: this.state.code.value,\r\n            usersUsername: this.state.usersSend\r\n        };\r\n        createGroup(groupData)\r\n            .then(response => {\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: \"Thank you! You're successfully created group!\",\r\n                });\r\n                this.props.history.push(\"/\");\r\n            }).catch(error => {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.name.validateStatus === 'success' &&\r\n            this.state.code.validateStatus === 'success'\r\n        );\r\n    }\r\n    onSearch = search => {\r\n        this.setState({ search, loading: !!search });\r\n        //console.log('Search:', search);\r\n        this.loadUserList(search);\r\n    }\r\n    onSelect = (value)=> {\r\n        const mentions = getMentions(value);\r\n        //console.log(mentions)\r\n        const usersSend = [];\r\n        mentions.forEach((mention) => {\r\n            usersSend.push(mention.value);\r\n        })\r\n        this.setState({\r\n            usersSend: usersSend,\r\n            ...this.validateUsers(usersSend)\r\n        })\r\n        //console.log(this.state.usersSend);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Create Group</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form onFinish={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem\r\n                            label=\"Full Name\"\r\n                            validateStatus={this.state.name.validateStatus}\r\n                            help={this.state.name.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"name\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Group name\"\r\n                                value={this.state.name.value}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />\r\n                        </FormItem>\r\n                        <FormItem label=\"Code\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.code.validateStatus}\r\n                            help={this.state.code.errorMsg}>\r\n                            <Input\r\n                                size=\"large\"\r\n                                name=\"code\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique code\"\r\n                                value={this.state.code.value}\r\n                                onBlur={this.validateGroupCodeAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateGroup)} />\r\n                        </FormItem>\r\n                        <FormItem label=\"Thành viên: \" validateStatus={this.state.validateStatusUser}\r\n                            help={this.state.errorMsgUser}><Mentions style={{ width: '100%' }} placeholder=\"Nhập '@' để tag bạn bè\" loading={this.state.loading} onSearch={this.onSearch} onChange={this.onSelect}>\r\n                                {this.state.users.map(({ id, username, name }) => (\r\n                                    <Option key={id} value={username} className=\"antd-demo-dynamic-option\">\r\n                                        <span>{name} @{username}</span>\r\n                                    </Option>\r\n                                ))}\r\n                            </Mentions></FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                size=\"large\"\r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Create</Button>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateName = (name) => {\r\n        if (name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };\r\n        }\r\n    }\r\n\r\n    validateGroup = (groupCodeValue) => {\r\n        if (groupCodeValue.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `GroupCode is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (groupCodeValue.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `GroupCode is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        }\r\n        else if (groupCodeValue.indexOf(' ') !== -1) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `GroupCode is valid (' ' characters not allowed.)`\r\n            }\r\n        }\r\n        else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateGroupCodeAvailability() {\r\n        // First check for client side errors in username\r\n        const groupCodeValue = this.state.code.value;\r\n        const groupValidation = this.validateGroup(groupCodeValue);\r\n\r\n        if (groupValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                code: {\r\n                    value: groupCodeValue,\r\n                    ...groupValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            code: {\r\n                value: groupCodeValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkGroupCodeAvailability(groupCodeValue)\r\n            .then(response => {\r\n                if (response.available) {\r\n                    this.setState({\r\n                        code: {\r\n                            value: groupCodeValue,\r\n                            validateStatus: 'success',\r\n                            errorMsg: null\r\n                        }\r\n                    });\r\n                } else {\r\n                    this.setState({\r\n                        code: {\r\n                            value: groupCodeValue,\r\n                            validateStatus: 'error',\r\n                            errorMsg: 'This username is already taken'\r\n                        }\r\n                    });\r\n                }\r\n            }).catch(error => {\r\n                // Marking validateStatus as success, Form will be recchecked at server\r\n                this.setState({\r\n                    code: {\r\n                        value: groupCodeValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            });\r\n    }\r\n}\r\n\r\nexport default NewGroup;","import React, { Component } from 'react';\r\nimport {\r\n  Link,\r\n  withRouter\r\n} from 'react-router-dom';\r\nimport './SiderMenu.css';\r\nimport { Menu, Button, Popover,Modal,notification } from 'antd';\r\nimport { getAllGroups,deleteGroup,leaveGroup } from '../util/APIUtils';\r\nimport { GROUP_LIST_SIZE } from '../constants';\r\nimport { PlusOutlined, MoreOutlined } from '@ant-design/icons';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nclass SiderMenu extends Component {\r\n  _isMounted = false;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      listGroups: [],\r\n      isLoading: false,\r\n      last: false,\r\n      visibleLeave: false,\r\n      visible: false,\r\n      currentGroupIndex: 0\r\n    }\r\n  }\r\n  loadListGroup = (page = 0) => {\r\n    if (this.props.isAuthenticated) {\r\n      if (this._isMounted) {\r\n        this.setState({\r\n          isLoading: true\r\n        })\r\n      }\r\n\r\n      const list = this.state.listGroups.slice();\r\n      getAllGroups(page, GROUP_LIST_SIZE)\r\n        .then(response => {\r\n          //console.log(response)\r\n          if (this._isMounted) {\r\n            this.setState({\r\n              listGroups: list.concat(response.content),\r\n              isLoading: false,\r\n              last: response.last\r\n            })\r\n          }\r\n\r\n        }).catch(error => {\r\n          if (this._isMounted) {\r\n            this.setState({\r\n              isLoading: false\r\n            })\r\n          }\r\n        });\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    this.loadListGroup();\r\n  }\r\n  handleCancel=()=>{\r\n    this.setState({\r\n        visible: false,\r\n        currentGroupIndex: 0\r\n    })\r\n  }\r\n onDeleteGroup=(groupIndex)=>{\r\n    this.setState({\r\n        visible: true,\r\n        currentGroupIndex: groupIndex\r\n    })\r\n }\r\n handleDeleteGroupSubmit=()=>{\r\n   \r\n    \r\n    const listGroups = this.state.listGroups.slice();\r\n\r\n    deleteGroup(listGroups[this.state.currentGroupIndex].id).then(response => {\r\n      listGroups.splice(this.state.currentGroupIndex,1);\r\n            this.setState({\r\n              listGroups: listGroups  ,\r\n                \r\n            });\r\n        notification.success({\r\n            message: 'Polling App',\r\n            description: response.message || 'Remove User Succesfully!'\r\n        });\r\n\r\n    }).catch(error => {\r\n        if (error.status === 401) {\r\n            this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n        } else {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        }\r\n    });\r\n    \r\n    this.setState({\r\n        visible: false,\r\n    })\r\n }\r\n handleCancelLeave=()=>{\r\n  this.setState({\r\n    visibleLeave: false,\r\n      currentGroupIndex: 0\r\n  })\r\n}\r\nonLeaveGroup=(groupIndex)=>{\r\n  this.setState({\r\n    visibleLeave: true,\r\n      currentGroupIndex: groupIndex\r\n  })\r\n}\r\nhandleLeaveGroupSubmit=()=>{\r\n \r\n  \r\n  const listGroups = this.state.listGroups.slice();\r\n\r\n  leaveGroup(listGroups[this.state.currentGroupIndex].id).then(response => {\r\n    listGroups.splice(this.state.currentGroupIndex,1);\r\n          this.setState({\r\n            listGroups: listGroups  ,\r\n              \r\n          });\r\n      notification.success({\r\n          message: 'Polling App',\r\n          description: response.message || 'Remove User Succesfully!'\r\n      });\r\n\r\n  }).catch(error => {\r\n      if (error.status === 401) {\r\n          this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n      } else {\r\n          notification.error({\r\n              message: 'Polling App',\r\n              description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n          });\r\n      }\r\n  });\r\n  \r\n  this.setState({\r\n    visibleLeave: false,\r\n  })\r\n}\r\n  render() {\r\n    const { location } = this.props;\r\n    //console.log(location.pathname)\r\n    //console.log(this.props.key);\r\n    const groupView = [];\r\n    this.state.listGroups.forEach((group, groupIndex) => {\r\n      groupView.push(<Menu.Item key={\"/groups/\" + group.code} style={{whiteSpace: 'normal', height: 'auto'}}><Link to={\"/groups/\" + group.code}></Link><span>{group.name}</span><Popover placement=\"right\" title=\"Tùy chọn\" content={<ManagerGroup code={group.code} onLeaveGroup={this.onLeaveGroup} onDeleteGroup={this.onDeleteGroup} currentUsername={this.props.currentUser.username} groupAdminUsername={group.usernameAdmin} groupIndex={groupIndex}/>} trigger=\"click\">\r\n        <Button type=\"text\" shape=\"circle\" style={{ float: \"right\" }} icon={<MoreOutlined />}></Button>\r\n      </Popover></Menu.Item>)\r\n    })\r\n    //console.log(this.state.listGroups)\r\n    return (\r\n      <><Modal\r\n      title=\"Confirm your action\"\r\n      visible={this.state.visible}\r\n      onOk={this.handleDeleteGroupSubmit}\r\n      onCancel={this.handleCancel}\r\n      footer={[\r\n          <Button key=\"back\" onClick={this.handleCancel}>\r\n              No\r\n          </Button>,\r\n          <Button key=\"submit\" type=\"primary\" onClick={this.handleDeleteGroupSubmit}>\r\n              Yes\r\n          </Button>,\r\n      ]}\r\n  ><p>Are you want delete this group?</p>\r\n  </Modal>\r\n  <Modal\r\n      title=\"Confirm your action\"\r\n      visible={this.state.visibleLeave}\r\n      onOk={this.handleLeaveGroupSubmit}\r\n      onCancel={this.handleCancelLeave}\r\n      footer={[\r\n          <Button key=\"back\" onClick={this.handleCancelLeave}>\r\n              No\r\n          </Button>,\r\n          <Button key=\"submit\" type=\"primary\" onClick={this.handleLeaveGroupSubmit}>\r\n              Yes\r\n          </Button>,\r\n      ]}\r\n  ><p>Are you want leave this group?</p>\r\n  </Modal>\r\n      <div ref={(ref) => this.scrollParentRef = ref}>\r\n        <InfiniteScroll\r\n          initialLoad={false}\r\n          pageStart={0}\r\n          loadMore={this.loadListGroup}\r\n          hasMore={true}\r\n          // hasMore={true}\r\n          useWindow={false}\r\n        >\r\n          <Menu theme=\"light\" mode=\"inline\" className=\"scrollbox-content\" selectedKeys={[location.pathname]}>\r\n            <Menu.Item key=\"/group/new\" icon={<PlusOutlined />}> <Link to=\"/group/new\"> Tạo Group</Link></Menu.Item>\r\n            <Menu.Divider />\r\n            <Menu.ItemGroup key=\"g1\" title=\"Nhóm đã tham gia\">\r\n\r\n              {groupView}\r\n\r\n              {/* {this.state.isloading && (\r\n                        <div className=\"demo-loading-container\">\r\n                            <LoadingIndicator />\r\n                        </div>\r\n                    )} */}\r\n\r\n\r\n            </Menu.ItemGroup>\r\n          </Menu>\r\n        </InfiniteScroll></div></>\r\n    );\r\n  }\r\n\r\n}\r\nfunction ManagerGroup(props) {\r\n  return (\r\n      <div>\r\n          {props.currentUsername===props.groupAdminUsername&&<Link to={\"/editgroup/\"+props.code}><Button type=\"primary\" style={{marginBottom:\"10px\"}} block>Edit</Button></Link>}\r\n          {props.currentUsername===props.groupAdminUsername?<Button danger block onClick={() => props.onDeleteGroup(props.groupIndex)}>Delete Group</Button>:<Button danger block onClick={() => props.onLeaveGroup(props.groupIndex)}>Leave</Button>}\r\n      </div>\r\n  );\r\n}\r\nexport default withRouter(SiderMenu);","import React, { Component } from 'react';\r\nimport { editGroup, getGroup, getListUserForAddGroup, deleteUserGroup } from '../util/APIUtils';\r\n//import { API_BASE_URL} from '../constants';\r\n//import './NewGroup.css';\r\nimport {\r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH,\r\n    USER_MAX_LENGTH\r\n} from '../constants';\r\nimport {\r\n    SearchOutlined\r\n} from '@ant-design/icons';\r\nimport { Form, Input, Button, notification, Mentions, Select, Space, Avatar, Table, Modal } from 'antd';\r\nconst FormItem = Form.Item;\r\nconst Option = Select.Option;\r\nconst { getMentions } = Mentions;\r\n\r\nclass EditGroup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: '',\r\n                validateStatus: 'success'\r\n            },\r\n            code: {\r\n                value: ''\r\n            },\r\n            users: [],\r\n            usersSend: [],\r\n            group: {\r\n                member: []\r\n            },\r\n            loading: false,\r\n            visible: false,\r\n            currentUserId: 0,\r\n            currentUserIndex: 0\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n    validateUsers = (mentions) => {\r\n        //console.log(mentions.length)\r\n        if (mentions.length === 0) {\r\n            return {\r\n                validateStatusUser: 'error',\r\n                errorMsgUser: 'Please enter a username!'\r\n            }\r\n        } else if (mentions.length > USER_MAX_LENGTH) {\r\n            return {\r\n                validateStatusUser: 'error',\r\n                errorMsgUser: `User is too much (Maximum ${USER_MAX_LENGTH} user allowed)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatusUser: 'success',\r\n                errorMsgUser: null\r\n            }\r\n        }\r\n    }\r\n    componentDidUpdate(nextProps) {\r\n        //console.log(\"didupdate\")\r\n        if (this.props.match.params.code !== nextProps.match.params.code) {\r\n            // Reset State \r\n            //console.log(\"next\")\r\n            // if (this._isMounted) {\r\n            this.setState({\r\n                name: {\r\n                    value: '',\r\n                    validateStatus: 'success'\r\n                },\r\n                code: {\r\n                    value: ''\r\n                },\r\n                users: [],\r\n                usersSend: [],\r\n                group: {\r\n                    member: []\r\n                },\r\n                loading: false\r\n            });\r\n            this.setState({\r\n                code: {\r\n                    value: this.props.match.params.code\r\n                }\r\n            })\r\n            this.loadGroup(this.props.match.params.code);\r\n\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n    }\r\n    componentDidMount() {\r\n        this.setState({\r\n            code: {\r\n                value: this.props.match.params.code\r\n            }\r\n        })\r\n        this.loadGroup(this.props.match.params.code);\r\n\r\n    }\r\n    loadGroup = (code) => {\r\n        let promise;\r\n        promise = getGroup(code);\r\n\r\n        if (!promise) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            loading: true\r\n        })\r\n        promise\r\n            .then(response => {\r\n                // let users = response.filter((user) => {\r\n                //     var check = true;\r\n                //     this.state.usersSend.forEach((userSend) => {\r\n                //         if (user.username == userSend) {\r\n                //             check = false;\r\n                //         }\r\n                //     })\r\n                //     return check;\r\n                // })\r\n\r\n                const name = this.state.name;\r\n                this.setState({\r\n                    group: response,\r\n                    name: {\r\n                        ...name,\r\n                        value: response.name\r\n                    },\r\n                    loading: false,\r\n                })\r\n\r\n\r\n\r\n            }).catch(error => {\r\n                this.setState({\r\n                    loading: false\r\n                })\r\n            });\r\n\r\n    }\r\n    loadUserList = (key) => {\r\n        let promise;\r\n        promise = getListUserForAddGroup(key, this.state.code.value);\r\n\r\n        if (!promise) {\r\n            return;\r\n        }\r\n        promise\r\n            .then(response => {\r\n                let users = response.filter((user) => {\r\n                    var check = true;\r\n                    this.state.usersSend.forEach((userSend) => {\r\n                        if (user.username === userSend) {\r\n                            check = false;\r\n                        }\r\n                    })\r\n                    return check;\r\n                })\r\n                this.setState({\r\n                    users: users,\r\n                    loading: false,\r\n                })\r\n\r\n\r\n\r\n            }).catch(error => {\r\n                // this.setState({\r\n                //     users: response\r\n                // })\r\n            });\r\n\r\n    }\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;\r\n        const inputValue = target.value;\r\n        //console.log(this.state.code.value)\r\n        this.setState({\r\n            [inputName]: {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n        const groupData = {\r\n            name: this.state.name.value,\r\n            code: this.state.code.value,\r\n            usersUsername: this.state.usersSend\r\n        };\r\n        editGroup(groupData)\r\n            .then(response => {\r\n\r\n                notification.success({\r\n                    message: 'Polling App',\r\n                    description: \"Thank you! You're successfully created group!\",\r\n                });\r\n                this.props.history.push(\"/groups/\" + this.state.code.value);\r\n            }).catch(error => {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.name.validateStatus === 'success');\r\n    }\r\n    onSearch = search => {\r\n        this.setState({ search, loading: !!search });\r\n        //console.log('Search:', search);\r\n        this.loadUserList(search);\r\n    }\r\n    onSelect = (value) => {\r\n        const mentions = getMentions(value);\r\n        //console.log(mentions)\r\n        const usersSend = [];\r\n        mentions.forEach((mention) => {\r\n            usersSend.push(mention.value);\r\n        })\r\n        this.setState({\r\n            usersSend: usersSend,\r\n            ...this.validateUsers(usersSend)\r\n        })\r\n        //console.log(this.state.usersSend);\r\n    }\r\n    getColumnSearchProps = dataIndex => ({\r\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n            <div style={{ padding: 8 }}>\r\n                <Input\r\n                    ref={node => {\r\n                        this.searchInput = node;\r\n                    }}\r\n                    placeholder={`Search ${dataIndex}`}\r\n                    value={selectedKeys[0]}\r\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n                    style={{ marginBottom: 8, display: 'block' }}\r\n                />\r\n                <Space>\r\n                    <Button\r\n                        type=\"primary\"\r\n                        onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n                        icon={<SearchOutlined />}\r\n                        size=\"small\"\r\n                        style={{ width: 90 }}\r\n                    >\r\n                        Search\r\n                    </Button>\r\n                    <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n                        Reset\r\n                    </Button>\r\n                    <Button\r\n                        type=\"link\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            confirm({ closeDropdown: false });\r\n                            this.setState({\r\n                                searchText: selectedKeys[0],\r\n                                searchedColumn: dataIndex,\r\n                            });\r\n                        }}\r\n                    >\r\n                        Filter\r\n                    </Button>\r\n                </Space>\r\n            </div>\r\n        ),\r\n        filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n        onFilter: (value, record) =>\r\n            record[dataIndex]\r\n                ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n                : '',\r\n        onFilterDropdownVisibleChange: visible => {\r\n            if (visible) {\r\n                setTimeout(() => this.searchInput.select(), 100);\r\n            }\r\n        },\r\n        render: text =>\r\n            this.state.searchedColumn === dataIndex ? (\r\n                // <Highlighter\r\n                //   highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n                //   searchWords={[this.state.searchText]}\r\n                //   autoEscape\r\n                //   textToHighlight={text ? text.toString() : ''}\r\n                // />\r\n                text\r\n            ) : (\r\n                text\r\n            ),\r\n    });\r\n\r\n    handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n        confirm();\r\n        this.setState({\r\n            searchText: selectedKeys[0],\r\n            searchedColumn: dataIndex,\r\n        });\r\n    };\r\n\r\n    handleReset = clearFilters => {\r\n        clearFilters();\r\n        this.setState({ searchText: '' });\r\n    };\r\n    handleCancel = () => {\r\n        this.setState({\r\n            visible: false,\r\n            currentUserId: 0,\r\n            currentUserIndex: 0\r\n        })\r\n    }\r\n    onDeleteUser = (userId, userIndex) => {\r\n        //console.log(userId)\r\n        //console.log(userIndex)\r\n        this.setState({\r\n            visible: true,\r\n            currentUserId: userId,\r\n            currentUserIndex: userIndex\r\n        })\r\n    }\r\n    onChange = (pagination, filters, sorter, extra) => {\r\n        //console.log('params', pagination, filters, sorter, extra);\r\n    }\r\n    handleDeleteUserSubmit = () => {\r\n\r\n\r\n        const group = this.state.group;\r\n        //console.log(group);\r\n        //console.log(this.state.currentUserId);\r\n        //console.log(this.state.currentUserIndex);\r\n        const groupMem = this.state.group.member.slice();\r\n        // console.log(this.state.group.member);\r\n        // groupMem.splice(this.state.currentUserIndex,1);\r\n        // const newgroup = [...groupMem]\r\n        // console.log(newgroup);\r\n        deleteUserGroup(group.id, this.state.currentUserId).then(response => {\r\n            groupMem.splice(this.state.currentUserIndex, 1);\r\n            group.member = groupMem;\r\n            //console.log(group);\r\n            this.setState({\r\n                group: group,\r\n\r\n            });\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: response.message || 'Remove User Succesfully!'\r\n            });\r\n\r\n        }).catch(error => {\r\n            if (error.status === 401) {\r\n                this.props.handleLogout('/login', 'error', 'You have been logged out. Please login to vote');\r\n            } else {\r\n                notification.error({\r\n                    message: 'Polling App',\r\n                    description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                });\r\n            }\r\n        });\r\n        this.setState({\r\n            visible: false,\r\n        })\r\n    }\r\n    render() {\r\n        const columns = [\r\n            {\r\n                title: 'Mã',\r\n                dataIndex: 'id',\r\n                key: \"id\",\r\n                sorter: {\r\n                    compare: (a, b) => a.id - b.id,\r\n                    multiple: 4,\r\n                },\r\n                width: 100,\r\n                fixed: 'left',\r\n                ...this.getColumnSearchProps('id'),\r\n            },\r\n            {\r\n                title: 'Username',\r\n                dataIndex: 'username',\r\n                key: \"username\",\r\n                sorter: {\r\n                    compare: (a, b) => a.username.length - b.username.length,\r\n                    multiple: 3,\r\n                },\r\n                width: 150,\r\n                fixed: 'left',\r\n                ...this.getColumnSearchProps('username'),\r\n            },\r\n            {\r\n                title: 'Name',\r\n                dataIndex: 'name',\r\n                key: \"name\",\r\n                sorter: {\r\n                    compare: (a, b) => a.name.length - b.name.length,\r\n                    multiple: 2,\r\n                },\r\n                width: 100,\r\n                ...this.getColumnSearchProps('name'),\r\n            },\r\n            {\r\n                title: 'Avatar',\r\n                dataIndex: 'photo',\r\n                key: \"photo\",\r\n                width: 100,\r\n                render: photo => photo == null ? \"No Image\" : <Avatar\r\n                    //src={API_BASE_URL+\"/file/getImage/\" + photo} \r\n                    src={\"https://drive.google.com/uc?export=view&id=\"+photo}\r\n                    >\r\n                </Avatar>,\r\n            },\r\n            {\r\n                title: 'Action',\r\n                dataIndex: 'action',\r\n                key: \"action\",\r\n                width: 90,\r\n                fixed: 'right',\r\n                render: (num, record, index) => record.username !== this.state.group.usernameAdmin && <Button type=\"danger\" onClick={() => this.onDeleteUser(record.id, index)}>Delete</Button>,\r\n            },\r\n        ];\r\n        // const mem = [...this.state.group.member];\r\n        // const data = [];\r\n        // this.state.group.member.forEach((mem) => {\r\n        //     data.push({\r\n        //         ...mem,\r\n        //         key: mem.id\r\n        //     })\r\n        // })\r\n        //console.log(this.state.group.member);\r\n        //console.log(this.state.group)\r\n        return (\r\n            <>\r\n                <Modal\r\n                    title=\"Confirm your action\"\r\n                    visible={this.state.visible}\r\n                    onOk={this.handleDeleteUserSubmit}\r\n                    onCancel={this.handleCancel}\r\n                    footer={[\r\n                        <Button key=\"back\" onClick={this.handleCancel}>\r\n                            No\r\n                        </Button>,\r\n                        <Button key=\"submit\" type=\"primary\" onClick={this.handleDeleteUserSubmit}>\r\n                            Yes\r\n                        </Button>,\r\n                    ]}\r\n                ><p>Are you want delete this user?</p>\r\n                </Modal>\r\n                <div className=\"signup-container\">\r\n                    <h1 className=\"page-title\">Edit Group</h1>\r\n                    <div className=\"signup-content\">\r\n                        <Form onFinish={this.handleSubmit} className=\"signup-form\">\r\n                            <FormItem\r\n                                label=\"Full Name\"\r\n                                validateStatus={this.state.name.validateStatus}\r\n                                help={this.state.name.errorMsg}>\r\n                                <Input\r\n                                    size=\"large\"\r\n                                    name=\"name\"\r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\"Group name\"\r\n                                    value={this.state.name.value}\r\n                                    onChange={(event) => this.handleInputChange(event, this.validateName)} />\r\n                            </FormItem>\r\n                            <FormItem label=\"Code\">\r\n                                <Input\r\n                                    size=\"large\"\r\n                                    name=\"code\"\r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\"A unique code\"\r\n                                    value={this.state.code.value}\r\n                                    disabled\r\n                                    onChange={(event) => this.handleInputChange(event)} />\r\n                            </FormItem>\r\n                            <FormItem label=\"Thêm thành viên: \" validateStatus={this.state.validateStatusUser}\r\n                                help={this.state.errorMsgUser}><Mentions style={{ width: '100%' }} placeholder=\"Nhập '@' để tag bạn bè\" loading={this.state.loading} onSearch={this.onSearch} onChange={this.onSelect}>\r\n                                    {this.state.users.map(({ id, username, name }) => (\r\n                                        <Option key={id} value={username} className=\"antd-demo-dynamic-option\">\r\n                                            <span>{name} @{username}</span>\r\n                                        </Option>\r\n                                    ))}\r\n                                </Mentions></FormItem>\r\n                            <FormItem>\r\n                                <Button type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    size=\"large\"\r\n                                    className=\"signup-form-button\"\r\n                                    disabled={this.isFormInvalid()}>Update</Button>\r\n                            </FormItem>\r\n                        </Form>\r\n                    </div>\r\n\r\n                </div>\r\n                <Table columns={columns} dataSource={this.state.group.member} rowKey=\"id\" onChange={this.onChange} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateName = (name) => {\r\n        if (name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default EditGroup;","import React, { Component } from 'react';\r\nimport { changePassword } from '../util/APIUtils';\r\n//import './Signup.css';\r\nimport { \r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../constants';\r\nimport { LockOutlined } from '@ant-design/icons';\r\nimport { Form, Input, Button, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass ChangePassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newpassword: {\r\n                value: ''\r\n            },\r\n            currentpassword: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit() {\r\n    \r\n        const changePasswordRequest = {\r\n            newPassword: this.state.newpassword.value,\r\n            currentPassword: this.state.currentpassword.value\r\n        };\r\n        changePassword(changePasswordRequest)\r\n        .then(response => {\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: \"Thank you! You're successfully update password!\",\r\n            });          \r\n            this.props.history.push(\"/users/\"+this.props.currentUser.username);\r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(\r\n            this.state.newpassword.validateStatus === 'success' &&\r\n            this.state.currentpassword.validateStatus === 'success'\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Change Password</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form onFinish={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem \r\n                        label=\"Current Password\"\r\n                            validateStatus={this.state.currentpassword.validateStatus}\r\n                            help={this.state.currentpassword.errorMsg}>\r\n                            <Input.Password \r\n                        prefix={<LockOutlined />}\r\n                                size=\"large\"\r\n                                name=\"currentpassword\"\r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your curent password\"\r\n                                value={this.state.currentpassword.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                        label=\"New Password\"\r\n                            validateStatus={this.state.newpassword.validateStatus}\r\n                            help={this.state.newpassword.errorMsg}>\r\n                            <Input.Password \r\n                        prefix={<LockOutlined />}\r\n                                size=\"large\"\r\n                                name=\"newpassword\" \r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your new password\" \r\n                                value={this.state.newpassword.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />    \r\n                        </FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Update Password</Button>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default ChangePassword;","import React, {  useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  Route,\n  withRouter,\n  Switch\n} from 'react-router-dom';\n\nimport { getCurrentUser } from '../util/APIUtils';\nimport { ACCESS_TOKEN } from '../constants';\n\nimport PostList from '../poll/PostList';\nimport NewPost from '../poll/NewPost';\nimport Login from '../user/login/Login';\nimport Signup from '../user/signup/Signup';\nimport Profile from '../user/profile/Profile';\nimport AppHeader from '../common/AppHeader';\nimport NotFound from '../common/NotFound';\nimport LoadingIndicator from '../common/LoadingIndicator';\nimport PrivateRoute from '../common/PrivateRoute';\n// import PrivateRoute2 from '../common/PrivateRoute2';\nimport { notification } from 'antd';\nimport { Layout } from 'antd';\nimport NewGroup from '../group/NewGroup';\nimport SiderMenu from '../common/SiderMenu';\nimport EditGroup from '../group/EditGroup';\nimport ChangePassword from '../user/ChangePassword';\nconst { Header, Sider, Content } = Layout;\n//const { Content } = Layout;\n\nconst App = (props) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  notification.config({\n    placement: 'topRight',\n    top: 70,\n    duration: 3,\n  });\n\n  useEffect(() => {\n    loadCurrentUser();\n    //console.log(currentUser);\n  }, [])\n  const readNoti = function(){\n    currentUser.notificationCount--;\n    setCurrentUser(currentUser);\n  }\n  const loadCurrentUser = function () {\n    setIsLoading(true);\n    getCurrentUser()\n      .then(response => {\n        setCurrentUser(response);\n        setIsAuthenticated(true);\n        setIsLoading(false);\n      }).catch(error => {\n        setIsLoading(false);\n      });\n  }\n\n\n  const handleLogout = function (redirectTo = \"/\", notificationType = \"success\", description = \"You're successfully logged out.\") {\n    localStorage.removeItem(ACCESS_TOKEN);\n    setCurrentUser(null);\n    setIsAuthenticated(false);\n\n    props.history.push(redirectTo);\n\n    notification[notificationType]({\n      message: 'Polling App',\n      description: description,\n    });\n  }\n\n  const handleLogin = function () {\n    notification.success({\n      message: 'Polling App',\n      description: \"You're successfully logged in.\",\n    });\n    loadCurrentUser();\n    props.history.push(\"/\");\n  }\n  if (isLoading) {\n    return <LoadingIndicator />\n  }\n  return (\n<Layout className=\"app-container\">\n      <Header>\n      <AppHeader \n      readNoti = {readNoti}\n      isAuthenticated={isAuthenticated}\n        currentUser={currentUser}\n        onLogout={handleLogout} /></Header>\n      <Layout>\n        <Sider\n          style={{\n            height: \"100vh\",\n            position: \"fixed\",\n            maxHeight: \"calc(100% - 64px)\",\n            left: 0\n          }}\n          className=\"sider scrollbox scrollbox_delayed\"\n        >\n          {isAuthenticated&&<SiderMenu key={props.location.pathname===\"/group/new\"?1:props.location.pathname.indexOf(\"/editgroup/\")!==-1?2:3} currentUser={currentUser} isAuthenticated={isAuthenticated}/>}\n        </Sider>\n        <Content className=\"app-content\">\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\"\n                render={(props) => <PostList isAuthenticated={isAuthenticated}\n                  currentUser={currentUser} handleLogout={handleLogout} type=\"HOME\" {...props} />}>\n              </Route>\n              <Route path=\"/login\"\n                render={(props) => <Login onLogin={handleLogin} type=\"login\" {...props} />}></Route>\n                <Route path=\"/auth/:code\"\n                render={(props) => <Login onLogin={handleLogin} type=\"confirm\" {...props} />}></Route>\n              <Route path=\"/signup\" component={Signup}></Route>\n              <Route path=\"/users/:username\"\n                render={(props) => <Profile isAuthenticated={isAuthenticated} handleLogout={handleLogout} key={props.match.params.username} currentUser={currentUser} {...props} />}>\n              </Route>\n              <Route path=\"/post/:id\" authenticated={isAuthenticated}\n                render={(props) => <PostList isAuthenticated={isAuthenticated}\n                currentUser={currentUser} key={props.match.params.id} handleLogout={handleLogout} type=\"ONE_POST\" {...props} />}>\n              </Route>\n              <Route path=\"/search/:search\" authenticated={isAuthenticated}\n                render={(props) => <PostList isAuthenticated={isAuthenticated}\n                currentUser={currentUser} key={props.match.params.search} handleLogout={handleLogout} type=\"SEARCH_POST\" {...props} />}>\n              </Route>\n              <Route authenticated={isAuthenticated} path=\"/groups/:code\"\n                render={(props) => <PostList isAuthenticated={isAuthenticated}\n                currentUser={currentUser} handleLogout={handleLogout} type=\"GROUP\" {...props} />}>\n              </Route>\n              <PrivateRoute authenticated={isAuthenticated} path=\"/changepassword/:username\" currentUser={currentUser} component={ChangePassword} handleLogout={handleLogout}></PrivateRoute>\n              <PrivateRoute authenticated={isAuthenticated} path=\"/editgroup/:code\" component={EditGroup} handleLogout={handleLogout}></PrivateRoute>\n              <PrivateRoute authenticated={isAuthenticated} path=\"/poll/new\" component={NewPost} handleLogout={handleLogout}></PrivateRoute>\n              <PrivateRoute authenticated={isAuthenticated} path=\"/group/new\" component={NewGroup} handleLogout={handleLogout}></PrivateRoute>\n              <Route component={NotFound}></Route>\n            </Switch>\n          </div>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n}\n\n\n// class App extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       currentUser: null,\n//       isAuthenticated: false,\n//       isLoading: false\n//     }\n//     this.handleLogout = this.handleLogout.bind(this);\n//     this.loadCurrentUser = this.loadCurrentUser.bind(this);\n//     this.handleLogin = this.handleLogin.bind(this);\n\n//     notification.config({\n//       placement: 'topRight',\n//       top: 70,\n//       duration: 3,\n//     });    \n//   }\n\n//   loadCurrentUser() {\n//     this.setState({\n//       isLoading: true\n//     });\n//     getCurrentUser()\n//     .then(response => {\n//       this.setState({\n//         currentUser: response,\n//         isAuthenticated: true,\n//         isLoading: false\n//       });\n//       console.log(this.state.isAuthenticated)\n//     }).catch(error => {\n//       this.setState({\n//         isLoading: false\n//       });  \n//     });\n//   }\n\n//   componentDidMount() {\n//     this.loadCurrentUser();\n//   }\n\n//   handleLogout(redirectTo=\"/\", notificationType=\"success\", description=\"You're successfully logged out.\") {\n//     localStorage.removeItem(ACCESS_TOKEN);\n\n//     this.setState({\n//       currentUser: null,\n//       isAuthenticated: false\n//     });\n\n//     this.props.history.push(redirectTo);\n\n//     notification[notificationType]({\n//       message: 'Polling App',\n//       description: description,\n//     });\n//   }\n\n//   handleLogin() {\n//     notification.success({\n//       message: 'Polling App',\n//       description: \"You're successfully logged in.\",\n//     });\n//     this.loadCurrentUser();\n//     this.props.history.push(\"/\");\n//   }\n\n//   render() {\n//     if(this.state.isLoading) {\n//       return <LoadingIndicator />\n//     }\n//     return (\n//         <Layout className=\"app-container\">\n//           <AppHeader isAuthenticated={this.state.isAuthenticated} \n//             currentUser={this.state.currentUser} \n//             onLogout={this.handleLogout} />\n\n//           <Content className=\"app-content\">\n//             <div className=\"container\">\n//               <Switch>      \n//                 <Route exact path=\"/\" \n//                   render={(props) => <PostList isAuthenticated={this.state.isAuthenticated} \n//                       currentUser={this.state.currentUser} handleLogout={this.handleLogout} {...props} />}>\n//                 </Route>\n//                 <Route path=\"/login\" \n//                   render={(props) => <Login onLogin={this.handleLogin} {...props} />}></Route>\n//                 <Route path=\"/signup\" component={Signup}></Route>\n//                 <Route path=\"/users/:username\" \n//                   render={(props) => <Profile isAuthenticated={this.state.isAuthenticated} currentUser={this.state.currentUser} {...props}  />}>\n//                 </Route>\n//                 <PrivateRoute authenticated={this.state.isAuthenticated} path=\"/poll/new\" component={NewPost} handleLogout={this.handleLogout}></PrivateRoute>\n//                 <Route component={NotFound}></Route>\n//               </Switch>\n//             </div>\n//           </Content>\n//         </Layout>\n//     );\n//   }\n// }\n\nexport default withRouter(App);\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>, \n    document.getElementById('root')\n);\n\nregisterServiceWorker();\n\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './app/App';\n// import reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n// // import React from 'react';\n// // import ReactDOM from 'react-dom';\n// // import './index.css';\n// // import App from './App';\n// // import * as serviceWorker from './serviceWorker';\n// // import { BrowserRouter as Router } from 'react-router-dom';\n\n// // ReactDOM.render(\n// //     <Router>\n// //         <App />\n// //     </Router>, \n// //     document.getElementById('root')\n// // );\n\n// // serviceWorker.unregister();"],"sourceRoot":""}